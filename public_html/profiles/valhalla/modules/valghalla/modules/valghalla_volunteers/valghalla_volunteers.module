<?php

/**
 * @file
 * Code for the valghalla volunteers feature.
 */

use ValghallaVolunteers\ValghallaVolunteersLogger;

include_once 'valghalla_volunteers.features.inc';
require_once 'valghalla_volunteers.inc';
module_load_include('inc', 'valghalla_volunteers', 'includes/valghalla_volunteers.utils');
module_load_include('php', 'valghalla_volunteers', 'includes/ValghallaVolunteersLogger.class');

/**
 * Implements hook_permission().
 */
function valghalla_volunteers_permission() {
  return array(
    'administer valghalla' => array(
      'title' => t('Administer valghalla'),
    ),
    'view volunteers' => array(
      'title' => t('Se deltagere'),
    ),
    'add volunteers' => array(
      'title' => t('Tilføj deltagere'),
    ),
    'debug volunteers' => array(
      'title' => t('Access to debug volunteers data'),
    ),
    'see all psn numbers' => array(
      'title' => t('Se alle CPR numre'),
    ),
    'add volunteer to station' => array(
      'title' => t('Tilføj deltager til valgsted'),
    ),
    'volunteers rsvp' => array(
      'title' => t('Access to rsvp for volunteers'),
    ),
    'change volunteers rsvp' => array(
      'title' => t('Tilladelse til at ændre deltager RSVP'),
    ),
    'administer sub secretaries' => array(
      'title' => t('Access to administer sub secretaries'),
    ),
    'access entire user profile form' => array(
      'title' => t('Tilgå hele brugerprofilformularen'),
    ),
    'view polling station' => array(
      'title' => t('View polling station'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function valghalla_volunteers_menu() {

  $items = array(
    'volunteers/rsvp' => array(
      'title' => t('Anmodning om svar'),
      'access arguments' => array('volunteers rsvp'),
      'page callback' => 'valghalla_volunteers_rsvp',
      'type' => MENU_CALLBACK,
    ),
    'volunteers/rsvp-invalid' => array(
      'title' => t('RSVP er ugyldig'),
      'access arguments' => array('volunteers rsvp'),
      'page callback' => 'valghalla_volunteers_rsvp_invalid_page',
      'type' => MENU_CALLBACK,
    ),
    'volunteers/login' => array(
      'title' => t('Anmodning om svar: Login'),
      'access arguments' => array('volunteers rsvp'),
      'page callback' => 'valghalla_volunteers_login',
      'type' => MENU_CALLBACK,
    ),
    'volunteers/station/%' => array(
      'title' => t('Håndtér tilforordnede'),
      'access arguments' => array('view polling station'),
      'page callback' => 'valghalla_volunteers_to_polling_station',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
    ),
    'volunteers/export' => array(
      'title' => t('Eksportér tilforordnede'),
      'access arguments' => array('administer volunteers'),
      'page callback' => 'valghalla_volunteers_export',
      'type' => MENU_CALLBACK,
    ),
    'add-sub-secretary' => array(
      'title' => t('Tilføj underbruger'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('valghalla_volunteers_add_sub_secretary_form'),
      'access arguments' => array('administer sub secretaries'),
      'type' => MENU_CALLBACK,
    ),
    'valghalla/change/party/%' => array(
      'title' => t('Skift parti'),
      'page callback' => 'valghalla_volunteers_change_party',
      'page arguments' => array(3),
      'access arguments' => array('administer valghalla'),
      'type' => MENU_CALLBACK,
    ),
    'volunteers/data/%' => array(
      'title' => t('test'),
      'access arguments' => array('volunteers rsvp'),
      'page callback' => 'valghalla_volunteers_data',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
    ),
    'admin/valghalla/valghalla' => array(
      'title' => t('Overview'),
      'description' => t('blablabla... valghalla election overview.'),
      'access arguments' => array('administer volunteers'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'file' => 'valghalla_volunteers_admin.inc',
      'weight' => -4,
    ),
  );

  // New menu callbacks.
  // plan is that when an item has been processed og the callback
  // has been updated, the item is moved here.
  $items['valghalla/deltagere'] = array(
    'title' => t('Deltagere'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'page callback' => 'system_admin_menu_block_page',
    'access callback' => array('user_is_logged_in'),
  );

  $items['valghalla/deltagere/tilfoej'] = array(
    'title' => t('Tilføj deltager'),
    'access arguments' => array('add volunteers'),
    'page callback' => 'valghalla_volunteers_add',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['ajax/volunteers/station/%'] = array(
    'title' => t('volunteers ajax'),
    'access arguments' => array('add volunteer to station'),
    'page callback' => 'valghalla_volunteers_to_polling_station_ajax',
    'page arguments' => array(3),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['volunteers/%/%/%/%'] = array(
    'title' => 'Volunteers by election, pooling station, party, role',
    'access arguments' => array('administer volunteers'),
    'page callback' => 'valghalla_volunteers_assigned',
    'page arguments' => array(1, 2, 3, 4),
    'file' => 'includes/valghalla_volunteers.utils.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['volunteers/cleanup-fc/%'] = array(
    'title' => 'Volunteers by election, pooling station, party, role',
    'access arguments' => array('administer volunteers'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('valghalla_volunteers_remove_broken', 2),
    'file' => 'includes/valghalla_volunteers.utils.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function valghalla_volunteers_theme($existing, $type, $theme, $path) {
  $items = array();

  $items['rsvp'] = array(
    'variables' => array(
      'rsvp' => NULL,
      'name' => NULL,
      'phone' => NULL,
      'email' => NULL,
      'form' => NULL,
    ),
    'template' => 'valghalla_volunteers_rsvp',
  );

  $items['station'] = array(
    'variables' => array(
      'parties_status' => NULL,
      'pollingstation_nid' => NULL,
      'party_posts_to_fill' => NULL,
      'existing_roles' => NULL,
    ),
    'template' => 'valghalla_volunteers_to_polling_station',
  );

  $items['seat_matrix_roles_table'] = array(
    'variables' => array(
      'parties_status' => NULL,
      'existing_roles' => NULL,
    ),
    'template' => 'valghalla_volunteers_seat_matrix_roles_table',
  );

  return $items;
}

/**
 * show the rsvp page if a valid login token is precent, or the token has been
 * verified in the login function
 *
 * @return string
 */
function valghalla_volunteers_rsvp() {
  global $language;

  $fc = _valghalla_volunteers_validate_key(arg(2));

  module_load_include('inc', 'valghalla_volunteers', 'valghalla_volunteers');
  if (!is_object($fc)) {
    drupal_goto('volunteers/rsvp-invalid');
  }

  $vlnt_node = $fc->hostEntity();
  $rsvp = 0;

  $rsvp_field = field_get_items('field_collection_item', $fc, 'field_rsvp');
  if(!empty($rsvp_field)){
    $rsvp = $rsvp_field[0]['value'];
  }

  $pollingstation_field = field_get_items('field_collection_item', $fc, 'field_vlnt_station');

  $polling_station = node_load($pollingstation_field[0]['target_id']);
  // TODO:
  // Figure out an elegant solution to getting the params we need for this page.
  $params = _valghalla_helper_get_token_values($fc);

  $form = drupal_get_form('valghalla_volunteers_rsvp_form');

  $post_script = filter_xss(variable_get('valghalla_rsvp_update_message'));

  $allow_update = variable_get('valghalla_allow_rsvp_update', FALSE);
  $user_access = user_access('change volunteers rsvp');

  if (!$rsvp || $allow_update || $user_access) {
    $post_script = drupal_render($form);
  }

  $rsvp_map = array(
    0 => '',
    1 => t('Ja'),
    2 => t('Nej, ikke denne gang'),
    3 => t('Nej, og jeg vil gerne fjernes fra listen'),
  );

  $volunteer_name = NULL;
  // Using name only if external server is not enabled, to prevent anonymized
  // content from being shown.
  if (!module_exists('valghalla_external_server')) {
    $volunteer_name = $vlnt_node->title;
  }

  // Detects whether it is IE11 or below.
  // See: https://gist.github.com/douglascabral/6ee44fc02218936d32741f7c7f7f157e
  $is_ie11_or_below = FALSE;
  if (preg_match('~MSIE|Internet Explorer~i', $_SERVER['HTTP_USER_AGENT']) || (strpos($_SERVER['HTTP_USER_AGENT'], 'Trident/7.0; rv:11.0') !== false)) {
    $is_ie11_or_below = TRUE;
  }

  return theme('rsvp', array(
    'rsvp' => $rsvp,
    'rsvp_status' => $rsvp_map[$rsvp],
    'name' => $volunteer_name,
    'params' => $params,
    'post_script' => $post_script,
    'is_internet_explorer' => $is_ie11_or_below,
  ));
}

/**
 * RSVP token invalid page callback.
 *
 * @return string
 *   HTML text output.
 */
function valghalla_volunteers_rsvp_invalid_page() {
  drupal_set_title(t('Invitationslinket er ugyldig'));

  $output = '<p>' . t('Invitationslinket der benyttes er ikke længere gyldig.') . '</p>';
  $output .= '<p>' . t('Denne side kan lukkes.') . '</p>';

  return $output;
}

/**
 * display pseudo login form
 *
 * @return string
 */
function valghalla_volunteers_login() {
  $form = drupal_get_form('valghalla_volunteers_login_form');
  return drupal_render($form);
}

/**
 * the pseudo login form
 *
 * @param array $form
 * @param array $form_state
 * @return array
 */
function valghalla_volunteers_login_form($form, &$form_state) {
  $form = array();

  $form['token'] = array(
      '#type' => 'textfield',
      '#title' => t('Token'),
      '#size' => 60,
      '#maxlength' => 128,
      '#required' => TRUE,
  );

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Fortsæt'),
  );

  return $form;
}

/**
 * handle pseudo logins
 *
 * @param array $form
 * @param array $form_state
 */
function valghalla_volunteers_login_form_submit($form, &$form_state) {
  module_load_include('inc', 'valghalla_volunteers', 'valghalla_volunteers');
  if (!is_object(_valghalla_volunteers_validate_key($form_state['values']['token']))) {
    drupal_goto('volunteers/rsvp/'.$form_state['values']['token']);
  }
  drupal_set_message(t('Invalid token'), 'error');
}

/**
 * the rsvp form
 *
 * @param array $form
 * @param array $form_state
 * @return array
 */
function valghalla_volunteers_rsvp_form($form, &$form_state) {
  $form = array();
  $rsvp = 1;
  $allow_comments = TRUE;

  $fc = _valghalla_volunteers_validate_key(arg(2));

  $rsvp_field = field_get_items('field_collection_item', $fc, 'field_rsvp');

  // Load party.
  if ($field_post_party = field_get_items('field_collection_item', $fc, 'field_post_party')) {

    // Load party.
    if ($party_tid = $field_post_party[0]['target_id']) {
      $party_term = taxonomy_term_load($party_tid);

      // Load "allow comments field" on term
      if ($field_allow_comments = field_get_items('taxonomy_term', $party_term, 'field_party_subsc_accept_comment')) {
        $allow_comments = (bool) $field_allow_comments[0]['value'];
      }
    }
  }

  if(!empty($rsvp_field)){
    $rsvp = 1;
  }

  if (variable_get('valghalla_volunteers_check_cpr_match', TRUE) && $GLOBALS['user']->uid == 0) {
    if (module_exists('valghalla_external_server_nemlogin')) {
      // Attempt to fetch CPR from session.
      $cpr = valghalla_external_server_nemlogin_fetch_cpr();
      if ($cpr) {
        $cpr = valghalla_synch_node_export_get_encrypt($cpr);
      }

      // Attempt to fetch CPR from form state.
      if (!$cpr && isset($form_state['input'])) {
        if (isset($form_state['input']['cpr'])) {
          $cpr = $form_state['input']['cpr'];
        }
      }

      $form['cpr'] = array(
        '#type' => 'hidden',
        '#default_value' => $cpr,
      );

      if (!$cpr) {
        $form['nemid_login_link'] = array(
          '#markup' => '<div class="form-group">' . l(t('Login med Nemlogin'), valghalla_external_server_nemlogin_login_link(request_uri())) . '</div>',
        );
      }
      else {
        $form['#cpr'] = $cpr;
      }
    }
  }

  $form['rsvp'] = array(
      '#type' => 'select',
      '#title' => t('Vælg'),
      '#options' => array(
          1 => t('Ja.'),
          2 => t('Nej, ikke denne gang.'),
          3 => t('Nej og jeg vil gerne fjernes fra listen.')
      ),
      '#default_value' => $rsvp,
  );

  // Don't allow for a comment, as it's disallowed.
  if ($allow_comments) {
    $form['rsvp_comment'] = array(
      '#type' => 'textarea',
      '#title' => t('Kommentar'),
      '#prefix' => '<div class="poll-form"">',
      '#suffix' => '</div>',
    );
  }

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Send'),
  );

  // Disabling form submit until CPR is present.
  if (variable_get('valghalla_volunteers_check_cpr_match', TRUE) && $GLOBALS['user']->uid == 0) {
    if (!$form['#cpr']) {
      $form['submit']['#disabled'] = 'disabled';
    }
  }

  return $form;
}

/**
 * Validates the rsvp form.
 */
function valghalla_volunteers_rsvp_form_validate($form, &$form_state) {
  $rsvp = $form_state['values']['rsvp'];
  if ($rsvp < 0 || $rsvp > 3) {
    form_set_error('rsvp', t('Ugyldig værdig for svar'));
  }

  if (variable_get('valghalla_volunteers_check_cpr_match', TRUE) && $GLOBALS['user']->uid == 0) {
    if (module_exists('valghalla_external_server_nemlogin')) {
      $cpr = valghalla_synch_node_export_get_decrypt($form_state['values']['cpr']);

      // Adding dash, if missing. E.g. 123456-7890.
      if (preg_match('/[0-9]{10}/', $cpr)) {
        $cpr = substr($cpr, 0, 6) . '-' . substr($cpr, 6, 4);
        $form_state['input']['cpr'] = valghalla_synch_node_export_get_encrypt($cpr);
      }

      if (!preg_match('/[0-9]{6}-[0-9]{4}/', $cpr)) {
        form_set_error('cpr', t('Wrong CPR format, correct format is 123456-7890'));
      }

      if (module_exists('valghalla_synch_node_export') && module_exists('valghalla_external_server')) {
        $cpr = valghalla_synch_node_export_get_encrypt($cpr);
      }

      // Getting CPR from volunteer node, which is attached to the field collection.
      $fc = _valghalla_volunteers_validate_key(arg(2));
      $volunteer = $fc->hostEntity();
      if ($field_cpr_number = field_get_items('node', $volunteer, 'field_cpr_number')) {
        $expected_cpr = $field_cpr_number[0]['value'];
      }

      if (strcmp($cpr, $expected_cpr) !== 0) {
        form_set_error('cpr', t('This token is not valid for the provided CPR'));
      }
    }
  }
}


/**
 * Handle rsvp form submits
 *
 * @param array $form
 * @param array $form_state
 */
function valghalla_volunteers_rsvp_form_submit($form, &$form_state) {
  module_load_include('inc', 'valghalla_volunteers', 'valghalla_volunteers');

  $fc = _valghalla_volunteers_validate_key(arg(2));
  $fc->field_rsvp[LANGUAGE_NONE][0]['value'] = $form_state['values']['rsvp'];
  if (isset($form_state['values']['rsvp_comment'])) {
    $fc->field_rsvp_comment[LANGUAGE_NONE][0]['value'] = $form_state['values']['rsvp_comment'];
  }
  else {
    $fc->field_rsvp_comment[LANGUAGE_NONE][0]['value'] = '';
  }
  $fc->save();

  // External server should not send any correspondention.
  if (!module_exists('valghalla_external_server')) {
    valghalla_volunteers_notify_volunteer($fc);
  }

  drupal_set_message(t('Vi har modtaget dit svar.'));
}

/**
 * build and display the matrix for adding volunteers to polling stations
 *
 * @global stdClass $user
 * @global stdClass $language
 * @param int $station_id
 * @return string
 */
function valghalla_volunteers_to_polling_station($station_nid = NULL) {
  global $user, $language;

  if (empty($_SESSION['election_nid'])) {
    drupal_goto('<front>');
  }

  if (empty($station_nid)) {
    drupal_set_title(t('Access denied'));
    return drupal_access_denied();
  }

  $user = user_load($user->uid);

  angularjs_init_application('volunteersTable');

  drupal_add_js(drupal_get_path('module', 'valghalla_volunteers') . '/vendor/angular-table.js');
  drupal_add_js(drupal_get_path('module', 'valghalla_volunteers') . '/js/volunteers_table.js');

  drupal_add_library('system', 'ui.autocomplete');
  drupal_add_js('var valghalla_destination_path = "' . implode('/', arg()) . '";', 'inline');
  drupal_add_js(drupal_get_path('module', 'valghalla_volunteers') . '/valghalla_volunteers.js');
  module_load_include('inc', 'valghalla_volunteers', 'valghalla_volunteers');

  $user_party_id = empty($user->field_party[LANGUAGE_NONE][0]['tid']) ? FALSE : $user->field_party[LANGUAGE_NONE][0]['tid'];
  $polling_station = node_load($station_nid);
  $field_digital_election_list=field_get_items('node', $polling_station, 'field_digital_election_list');

  if (isset($field_digital_election_list)&&(int)$field_digital_election_list[0]['value']==1){
    drupal_set_title($polling_station->title.'<div class="icon-digital-valglist">&nbsp;</div>', PASS_THROUGH);
  }
  else {
    drupal_set_title($polling_station->title);
  }

  $restrict_polling_stations = FALSE;

  if (!empty ($user->field_polling_station[LANGUAGE_NONE])) {
    $restrict_polling_stations = array();

    foreach ($user->field_polling_station[LANGUAGE_NONE] as $station) {
      $restrict_polling_stations[] = $station['nid'];
    }
  }

  $markup = '<div class="row row--equal-height-columns">';

  if (user_access('valghalla see all parties') && !$user_party_id) {
    // tth: If the user is administrator and theres no party chosen, show all parties!
    $parties = odin_get_parties();
    $markup .= '<div class="col-xs-12 col-sm-6 col-md-7">';

    foreach ($parties  as $party_tid => $party_name) {
      if (is_array($restrict_polling_stations) && !in_array($polling_station->nid, $restrict_polling_stations)) {
        continue;
      }

      // Polling stations.
      if ($output = valghalla_volunteers_to_polling_station_markup($polling_station, $party_tid)) {
        $markup .= $output;
      }
    }

    $markup .= '</div>';

    // Table.
    if ($output = valghalla_volunteers_seat_matrix_roles_table_markup($polling_station, $parties)) {
      $markup .= '<div class="col-xs-12 col-sm-6 col-md-5">';
      $markup .=    $output;
      $markup .= '</div>';
    }
  }
  elseif (!empty($user_party_id)) {

    // Polling stations.
    if ($output = valghalla_volunteers_to_polling_station_markup($polling_station, $user_party_id)) {
      $markup .= '<div class="col-xs-12 col-sm-6 col-md-7">';
      $markup .=    $output;
      $markup .= '</div>';
    }

    // Table.
    $user_party_loaded = taxonomy_term_load($user_party_id);
    if ($output = valghalla_volunteers_seat_matrix_roles_table_markup($polling_station, array($user_party_id => $user_party_loaded->name))) {
      $markup .= '<div class="col-xs-12 col-sm-6 col-md-5">';
      $markup .=    $output;
      $markup .= '</div>';
    }
  }
  else {
    $markup .= 'Ingen patries at vise.';
  }

  $markup .= '</div>';

  $modal = '
    <div class="modal fade js-add-volunteer-modal">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            
            <h4 class="modal-title">' . t('Vælg tilforordnet') . '</h4>
          </div>
          <div class="modal-body">
            <div ng-controller="volunteerController">
              <input type="text" class="form-control ng-valid ng-dirty" ng-model="query" ng-change="updateFilteredList()" placeholder="' . t('Indtast søgeord...') . '">
              <br>
              <table at-table at-paginated at-config="config" at-list="filteredList" class="table">
                <tr>
                  <td at-title="Name" at-sortable>
                    {{item.label}}
                  </td>
                  <td class="text-right">
                    <button class="js-select-volunteer btn btn-sm btn-success" data-volunteer_nid="{{item.volunteer_nid}}">' . t('Vælg') . '</button>
                  </td>
                <tr>
              </table>
              
              <div class="text-center">
                <at-pagination at-list="filteredList" at-config="config"></at-pagination>
              </div>
            </div>
            <p></p>
          </div>
        </div><!-- /.modal-content -->
      </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->';

  // Let the user edit the node, if he/she has sufficient permissions.
  $node_edit = '';
  if (node_access('update', node_load(arg(2)))) {
    $node_edit_url = '/node/' . arg(2) . '/edit?destination=' . current_path();
    $node_edit = '<div><a class="btn btn-secondary edit-polling-station hidden" href="' . $node_edit_url . '">' . t('Rediger valgsted') . '</a></div>';
  }

  // Let the used edit seats, if he/she has sufficient permissions.
  $edit_seats = '';
  if (user_access('administer valghalla')) {
    $edit_seats_url = '/station/' . arg(2) . '/seats?destination=' . current_path();
    $edit_seats = '<div><a class="btn btn-secondary edit-polling-station hidden" href="' . $edit_seats_url . '">' . t('Rediger placeringer') . '</a></div>';
  }

  return $node_edit . $edit_seats . $markup . $modal;
}

/**
 * Generate list markup for polling station.
 */
function valghalla_volunteers_to_polling_station_markup($polling_station, $user_party_id) {
  // Get values.
  $posts_array = valghalla_volunteers_polling_station_posts_to_fill($polling_station, $user_party_id);

  if (!empty($posts_array['party_posts_to_fill'])) {
    $parties_status = array();

    // Filling party status information.
    $status = odin_get_volunteers_count($_SESSION['election_nid'], array($polling_station->nid), odin_get_roles(), $user_party_id);
    $parties_status[$user_party_id] = array(
      'party_status_label' => _valhalla_blocks_get_label($status['total_count']),
      'status' => $status
    );

    $debug = user_access('debug volunteers');

    // Return the themed values.
    return theme('station', array(
      'parties_status' => $parties_status,
      'pollingstation_nid' => $posts_array['station_nid'],
      'party_posts_to_fill' => $posts_array['party_posts_to_fill'],
      'election_nid' => $_SESSION['election_nid'],
      'debug' => $debug,
    ));
  }
}

/**
 * Generate list of posts to fill and filled posts by polling station.
 *
 * Used for generating station list for adding volunteers.
 *
 * @param int $polling_station
 *   Nid of the polling station.
 * @param int $party_tid
 *   Tid of the party.
 * @param int $election_nid
 *   Election nid.
 *
 * @return array
 *   Array of the posts to fill with the information about existing posts.
 */
function valghalla_volunteers_polling_station_posts_to_fill($polling_station, $party_tid, $election_nid = NULL) {
  // Initializing variables.
  $station_id = $polling_station->nid;

  // If we didn't pass an election nid, TRY to use the one from the session.
  if (!$election_nid) {
    if (isset($_SESSION['election_nid'])) {
      $election_nid = $_SESSION['election_nid'];
    }
  }

  // We don't know the election nid - so to prevent any false bleeps, we make a
  // gentle abort.
  if (!$election_nid) {
    return array();
  }

  $election = node_load($election_nid);
  $party = taxonomy_term_load($party_tid);
  $is_election_active = odin_is_election_active($election_nid);

  $volunteers = array();
  $party_posts_to_fill = array();

  // Creating array of existing volunteers, as:
  // $volunteers['party_tid']['role_nid']['volunteer_nid'] =
  // array('nid' => volunteer_nid, 'fcid' => 'field_collection_id').
  $volunteer_query = new EntityFieldQuery();
  $volunteer_query->entityCondition('entity_type', 'field_collection_item')
    ->entityCondition('bundle', 'field_electioninfo')
    ->propertyCondition('archived', 0)
    ->fieldCondition('field_election', 'target_id', $election_nid)
    ->fieldCondition('field_post_party', 'target_id', $party_tid)
    ->fieldCondition('field_vlnt_station', 'target_id', $station_id);

  $query_result = $volunteer_query->execute();
  $result = array_shift($query_result);

  if (!empty($result)) {
    foreach ($result as $fcid => $fc) {
      $fc = entity_load_single('field_collection_item', $fcid);

      $role_nid = $fc->field_post_role['und'][0]['target_id'];

      if ($party_tid && $role_nid) {
        // Check if has host entity.
        if ($nid = $fc->hostEntity()->nid) {
          $volunteers[$party_tid][$role_nid][$nid] = array(
            'nid' => $nid,
            'fcid' => $fcid
          );
        }
      }
    }
  }

  // Getting field_collection attached to election.
  $electionAttachedVPSP = array();
  foreach ($election->field_volunteers_pr_pol_st_party['und'] as $field_volunteers_pr_pol_st_party) {
    $electionAttachedVPSP[] = $field_volunteers_pr_pol_st_party['value'];
  }

  // Populate filled_post with volunteer data.

  // Filling party information.
  $party_letter = '';
  if ($field_letter = field_get_items('taxonomy_term', $party, 'field_bogstav')) {
    $party_letter = $field_letter[0]['value'];
  }
  $party_posts_to_fill[$party_tid] = array(
    'party_name' => $party->name,
    'party_letter' => $party_letter,
    'posts' => array(),
  );

  if (node_access('update', $election) === TRUE) {
    // Party edit URL.
    $volunteer_pr_pol_st_pr_party_query = new EntityFieldQuery();
    $volunteer_pr_pol_st_pr_party_query->entityCondition('entity_type', 'field_collection_item')
      ->entityCondition('bundle', 'field_volunteers_pr_pol_st_party')
      ->propertyCondition('archived', 0)
      ->propertyCondition('item_id', $electionAttachedVPSP)
      ->fieldCondition('field_ppsp_polling_station', 'nid', $station_id)
      ->fieldCondition('field_ppsp_party', 'tid', $party_tid);
    $query_result = $volunteer_pr_pol_st_pr_party_query->execute();
    $result = array_shift($query_result);
    if ($result) {
      $fc_id = reset($result);
      $params = array('query' => array('destination' => current_path()));
      $party_posts_to_fill[$party_tid]['edit_url'] = url('field-collection/field-volunteers-pr-pol-st-party/' . $fc_id->item_id . '/edit', $params);
    }
  }

  // External subscription allowed only for active election.
  $field_status = field_get_items('node', $election, 'field_election_status');
  $external_subscribe_allowed = module_exists('valghalla_internal_server')
    && !empty($field_status[0]['value'])
    && !empty($election->status);

  // Traversing assigned posts.
  $assigned_posts = _valghalla_helper_get_posts_to_fill($polling_station, $party_tid);
  foreach ($assigned_posts as $assigned_post) {
    $id = NULL;
    $existing_post = NULL;

    // Check if there is a volunteer with the role in with this party.
    if (!empty($volunteers[$party_tid][$assigned_post['role_nid']])) {
      $volunteer = array_shift($volunteers[$party_tid][$assigned_post['role_nid']]);
      $id = $volunteer['nid'];
    }

    if ($id) {
      $volunteer_node = node_load($id);
      $fc_electionifo = entity_load_single('field_collection_item', $volunteer['fcid']);

      $token = NULL;

      if (is_object($fc_electionifo)) {
        $rsvp_comment = field_get_items('field_collection_item', $fc_electionifo, 'field_rsvp_comment');
        $rsvp = field_get_items('field_collection_item', $fc_electionifo, 'field_rsvp');
        $rsvp = empty($rsvp[0]['value']) ? 0 : $rsvp[0]['value'];
        if (user_access('add volunteer to station') && ($rsvp == 0 || variable_get('valghalla_volunteers_always_show_rsvp_link', FALSE))) {
          $field_token = field_get_items('field_collection_item', $fc_electionifo, 'field_token');
          $token = $field_token[0]['value'];
        }
      }

      $existing_post = array(
        'name' => $volunteer_node->title,
        'rsvp' => $rsvp,
        'rsvp_comment' => $rsvp_comment[0]['value'],
        'reply_link' => ($token) ? url("volunteers/rsvp/$token") : '',
        'nid' => $id,
        'fcid' => $volunteer['fcid'],
      );

    }
    else {
      // tth: The id is used when the js inserts the volunteer info on the
      // page previously the id was just a running number, which caused the
      // volunteer info to be places in numerous fields on the list, although
      // the volunteer was only added to one post. The problem only existed
      // when watching multiple parties on the polling station.
      // Fix: insert a number that is not repeated.
      $id = rand(1, 9) . rand(1, 9) . rand(1, 9);
    }

    // Adding filled post information to party_posts_to_fill.
    $role = node_load($assigned_post['role_nid']);
    $role_description = '';

    if ($field = field_get_items('node', $role, 'field_description')) {
      $role_description .= $field[0]['value'];
    }

    $party_posts_to_fill[$party_tid]['posts'][$id] = array(
      'id' => $id,
      'role_nid' => $assigned_post['role_nid'],
      'role_title' => $assigned_post['role_title'],
      'role_description' => $role_description,
      'party_tid' => $party_tid,
      'existing_post' => $existing_post,
    );

    if (!$existing_post) {
      // Party subscribe URL.
      if ($external_subscribe_allowed) {
        $role_loaded = node_load($assigned_post['role_nid']);

        $party_posts_to_fill[$party_tid]['posts'][$id]['post_subscribe_url'] = valghalla_internal_server_generate_external_subscribe_url($election, $party, $role_loaded, $polling_station);
      }
    }
  }

  // Party subscribe URL.
  if ($external_subscribe_allowed) {
    if (!empty($party_posts_to_fill[$party_tid]['posts'])) {
      $party_loaded = taxonomy_term_load($party_tid);
      $party_posts_to_fill[$party_tid]['party_subscribe_url'] = valghalla_internal_server_generate_external_subscribe_url($election, $party_loaded, NULL, $polling_station);
    }
  }

  // Finally returning our result.
  return array(
    'election_is_active' => $is_election_active,
    'party_posts_to_fill' => $party_posts_to_fill,
    'station_nid' => $station_id,
  );
}

/**
 * Generates a markup for showing role table status.
 *
 * @param mixed $polling_station
 *   Polling station node.
 * @param mixed $parties
 *   Array of parties.
 *
 *
 * @return string
 *   Themed output.
 */
function valghalla_volunteers_seat_matrix_roles_table_markup($polling_station, $parties) {
  // Filling party status information.
  foreach ($parties as $party_tid => $party) {
    $party = taxonomy_term_load($party_tid);
    $status = odin_get_volunteers_count($_SESSION['election_nid'], array($polling_station->nid), odin_get_roles(), $party_tid);

    // Load party letter
    $party_letter = '';
    if ($field_letter = field_get_items('taxonomy_term', $party, 'field_bogstav')) {
      $party_letter = $field_letter[0]['value'];
    }

    $parties_status[$party_tid] = array(
      'party_name' => $party->name,
      'party_letter' => $party_letter,
      'party_status_label' => _valhalla_blocks_get_label($status['total_count']),
      'status' => $status
    );
  }

  // Finding the roles the are actually used here.
  $existing_roles = array();
  foreach ($parties as $party_tid => $party) {
    foreach (odin_get_roles() as $role_nid => $role) {
      $status = odin_get_volunteers_count($_SESSION['election_nid'], array($polling_station->nid), array($role_nid => $role), $party_tid);

      if ($status['total_count']['assigned'] !== 0) {
        $existing_roles[$role_nid] = $status['role_count'][$role_nid]['role_name'];
      }
    }
  }

  // Return the themed values
  return theme('seat_matrix_roles_table', array(
    'parties_status' => $parties_status,
    'existing_roles' => $existing_roles,
  ));
}

/**
 * tth: Generate list of posts to fill and filled posts.
 * Used for validation when adding volunteer. (Which is why i had to seperate this from the
 * 'valghalla_volunteers_to_polling_station_markup' function. Someone took out the view_all_parties option. I cleaned up
 *
 * @param
 *  pollling station node
 *  party tid
 *  view all parties bool
 * @return
 *  information array
 */
function valghalla_volunteers_to_polling_station_roles($polling_station, $party_tid, $election_nid = FALSE) {
  global $user, $language;

  $station_id = $polling_station->nid;
  $field_digital_election_list=field_get_items('node', $polling_station, 'field_digital_election_list');
  $assigned_posts = _valghalla_helper_get_posts_to_fill($polling_station, $party_tid);

  // tth: Get all roles, query all content from bundle 'roles'
  $role_array = array_flip(odin_get_roles());

  $query_election_nid = $election_nid ? $election_nid : $_SESSION['election_nid'];

  // tth: Loop through the roles used on the pollingstation, and load the volunteers
  // $station_role_id is the "uniqe" id for the current role from the current party on the
  // current station. This is set during the add volunteer to station routine
  foreach($assigned_posts as $key => $value){
    $volunteer_query = new EntityFieldQuery();

    $volunteer_query->entityCondition('entity_type', 'field_collection_item')
      ->entityCondition('bundle', 'field_electioninfo')
      ->propertyCondition('archived', 0)
      ->fieldCondition('field_election', 'target_id', $query_election_nid)
      ->fieldCondition('field_vlnt_station', 'target_id', $station_id)
      ->fieldCondition('field_post_party', 'target_id', $party_tid)
      ->fieldCondition('field_post_role', 'target_id', $value['role_nid']);

    $query_result = $volunteer_query->execute();
    $result       = array_shift($query_result);

    if(!empty($result)){
      foreach($result as $fcid => $fc){
        $fc = entity_load_single('field_collection_item', $fcid);
        //check if has host entity
        if ($nid = $fc->hostEntity()->nid ) {
          $volunteers[$value['role_title']][$nid] = array('nid' => $nid, 'fcid' => $fcid);
        }
      }
    }
  }

  $existing = array();

  $posts_to_fill = array();

  // tth: Populate "existing"-array with volunteer data
  foreach($assigned_posts as $key => $value){
    $id = NULL;

    // tth: Check if there is a volunteer with the role
    if(!empty($volunteers[$value['role_title']])){
      $volunteer = array_shift($volunteers[$value['role_title']]);
      $id = $volunteer['nid'];
    }
    if($id){
      $existing[$id] = array(
          'data' => _valghalla_helper_wrap_name(node_load($id), "p", $volunteer['fcid']),
          'nid' => $id,
          'fcid' => $volunteer['fcid'],
        );
    }
    else {
      // tth: The id is used when the js inserts the volunteer info on the page
      // previously the id was just a running number, which caused the volunteer
      // info to be places in numerous fields on the list, although the volunteer
      // was only added to one post.
      // The problem only existed when watching multiple parties on the polling
      // station. Fix: insert a number that is not repeated.
      $id = rand(1,9) . rand(1,9) . rand(1,9);
      $value = $value;
    }

    $posts_to_fill[$id] = array('role_nid' => $value['role_nid'], 'role_title' => $value['role_title'], 'party_tid' => $party_tid);

    $id = NULL;
  }
  return array(
          'posts_to_fill' => $posts_to_fill,
          'user_party_id' => $party_tid,
          'station_nid' => $station_id,
          'existing' => $existing,
          );
}

/**
 * handle ajax calls
 */
function valghalla_volunteers_to_polling_station_ajax($action) {
  switch($action){
    case 'getvolunteers':
      drupal_json_output(valghalla_volunteers_get_volunteers());
      break;

    case 'add':
      $role_nid = (int)$_POST['role_nid'];
      $party_tid = (int)$_POST['party_tid'];
      $election_nid = (int)$_SESSION['election_nid'];
      $volunteer_nid = (int)$_POST['volunteer_nid'];
      $pollingstation_nid = (int)$_POST['pollingstation_nid'];

      drupal_json_output(valghalla_volunteers_add_volunteer_to_post($volunteer_nid, $pollingstation_nid, $role_nid, $party_tid, $election_nid));
      break;

    case 'remove':
      $fcid = (int)$_POST['fcid'];
      valghalla_volunteers_remove_volunteer_from_post($fcid);
      break;
  }
}

/**
 * Fetch a list of volunteers, published and without a post.
 */
function valghalla_volunteers_get_volunteers(){
  $volunteer_result = array();
  
  $volunteers = db_query('
    SELECT * FROM `node` n
    LEFT JOIN `field_data_field_party` p ON p.entity_id = n.nid
    LEFT JOIN `field_data_field_electioninfo` e ON e.entity_id = n.nid
    WHERE n.nid NOT IN (
      SELECT entity_id
      FROM  `field_data_field_electioninfo`
      WHERE field_electioninfo_value
      IN (
        SELECT e.entity_id
        FROM field_data_field_election e
        WHERE e.field_election_target_id = :election_nid
      )
    )
    AND n.type = \'volunteers\'
    AND n.status = 1
    ', array(':election_nid' => $_SESSION['election_nid']))->fetchAll();

  // Load user and fetch party id
  global $user;
  $user_account = user_load($user->uid);
  $user_party = '';

  if($party_field = field_get_items('user', $user_account, 'field_party')){
    $user_party = $party_field[0]['tid'];
  }

  foreach($volunteers as $key => $value){
    $volunteer_nid = $value->nid;

    $term = taxonomy_term_load($value->field_party_tid);
    $volunteer_party = '-';
    if(is_object($term)){
      $volunteer_party = $term->name;
    }

    // Skip the volunteer if his party is not the same as for the user
    // @TODO:
    //   Find out if this should be done in the sql
    if ($user_party && (!is_object($term) || $user_party != $term->tid)) {
      continue;
    }

    $volunteer_result[$value->nid] = array('volunteer_nid' => $value->nid, 'volunteer_name' => $value->title, 'volunteer_party' => $volunteer_party);
  }

  return $volunteer_result;
}

/**
 * Add volunteer to post
 *
 * @author Thomas Thune Hansen <tth@bellcom.dk>
 */

/**
 * Adding volunteer to post.
 *
 * @param int $volunteer_nid
 *   Nid of volunteer.
 * @param int $pollingstation_nid
 *   Nid of polling station.
 * @param int $role_nid
 *   Nid of role.
 * @param int $party_tid
 *   Tid of party.
 * @param int $election_nid
 *   Nid of election.
 * @param int $confirmed
 *   Whether volunteer post is confirmed right away (skipping invitation).
 * @param bool $invitation_synch
 *   Whether the volunteer must be synched to external server right away -
 *   only when inviting.
 *
 * @return array
 *   fcid - Field collection id.
 *   html - html rendered name of volunteer.
 */
function valghalla_volunteers_add_volunteer_to_post($volunteer_nid, $pollingstation_nid, $role_nid, $party_tid, $election_nid, $confirmed = 0, $invitation_synch = TRUE){
  // Save info to field collection.
  $fc = entity_create('field_collection_item', array('field_name' => 'field_electioninfo'));

  $volunteer_node = node_load($volunteer_nid);

  ValghallaVolunteersLogger::info(sprintf('Adding volunteer %s (nid: %d, uuid: %s) to post (el: %d, pol.st.: %d, party: %d, role: %d)', $volunteer_node->title, $volunteer_nid, $volunteer_node->uuid, $election_nid, $pollingstation_nid, $party_tid, $role_nid));

  $fc->setHostEntity('node', $volunteer_node);
  $fc->field_election[LANGUAGE_NONE][0]['target_id'] = $election_nid;
  $fc->field_vlnt_station[LANGUAGE_NONE][0]['target_id'] = $pollingstation_nid;
  $fc->field_post_party[LANGUAGE_NONE][0]['target_id'] = $party_tid;
  $fc->field_post_role[LANGUAGE_NONE][0]['target_id'] = $role_nid;
  $fc->field_rsvp[LANGUAGE_NONE][0]['value'] = $confirmed;
  $fc->field_token[LANGUAGE_NONE][0]['value'] = user_password(10);
  $fc->save();

  if (variable_get('valghalla_notifications_send_invitation_on_add', TRUE) && !$confirmed) {
    valghalla_volunteers_notify($election_nid, $role_nid, $fc, 'invitation');

    if ($invitation_synch && module_exists('valghalla_internal_server')) {
      // Forcing synch before sending the invitation message, so that sent is
      // valid at all times.
      valghalla_internal_server_perform_synch(TRUE);
    }
  }
  else if ($confirmed) {
    valghalla_volunteers_notify($election_nid, $role_nid, $fc, 'confirmed');
  }

  return array('fcid' => $fc->item_id, 'html' => _valghalla_helper_wrap_name($volunteer_node, "p", $fc->item_id));
}

/**
 * Remove volunteer from post
 *
 * @author Thomas Thune Hansen <tth@bellcom.dk>
 */
function valghalla_volunteers_remove_volunteer_from_post($fcid){
  if($fc = entity_load_single('field_collection_item', $fcid)){
    $election_field = field_get_items('field_collection_item', $fc, 'field_election');
    $post_role_field = field_get_items('field_collection_item', $fc, 'field_post_role');
    $polling_station_field = field_get_items('field_collection_item', $fc, 'field_vlnt_station');
    $party_field = field_get_items('field_collection_item', $fc, 'field_post_party');

    $election_nid = $election_field[0]['target_id'];
    $role_nid = $post_role_field[0]['target_id'];
    $pollingstation_nid = $polling_station_field[0]['target_id'];
    $party_tid = $party_field[0]['target_id'];

    // We send the notification. Only if a template is specified, will the
    // volunteer recieve a mail.
    valghalla_volunteers_notify($election_nid, $role_nid, $fc, 'remove');

    $volunteer_node = $fc->hostEntity();
    ValghallaVolunteersLogger::info(sprintf('Removing volunteer %s (nid: %d, uuid: %s) from post (el: %d, pol.st.: %d, party: %d, role: %d)', $volunteer_node->title, $volunteer_node->nid, $volunteer_node->uuid, $election_nid, $pollingstation_nid, $party_tid, $role_nid));

    $fc->delete();

    return drupal_json_output(array('fcid' => $fcid, 'success' => TRUE));
  }
  return drupal_json_output(array('success' => FALSE));
}

/**
 * Notify volunteer of post change.
 *
 * @param mixed $electionInfo
 *   Election info field collection.
 * @param string $forceType
 *   If we are forcing some notification type.
 */
function valghalla_volunteers_notify_volunteer($electionInfo, $forceType = NULL) {
  $field_election = field_get_items('field_collection_item', $electionInfo, 'field_election');
  if (!empty($field_election)) {
    $election_nid = $field_election[0]['target_id'];
  }
  $field_post_role = field_get_items('field_collection_item', $electionInfo, 'field_post_role');
  if (!empty($field_post_role)) {
    $role_nid = $field_post_role[0]['target_id'];
  }

  if ($election_nid && $role_nid) {
    $type = NULL;

    // Force type is used.
    if ($forceType) {
      $type = $forceType;
    }
    // No forced type, extract the type from the RSVP reply.
    else {
      $field_rsvp = field_get_items('field_collection_item', $electionInfo, 'field_rsvp');
      if (!empty($field_rsvp)) {
        $rsvp = $field_rsvp[0]['value'];
      }

      switch ($rsvp) {
        case 1:
          $type = 'confirmed';
          break;

        case 2:
          $type = 'rsvp_no';
          break;

        case 3:
          $type = 'rsvp_never';
          break;
      }
    }

    valghalla_volunteers_notify($election_nid, $role_nid, $electionInfo, $type);
  }
}

/**
 * add volunteer form
 *
 * Basically its just an embedded node_add form, slightly modified
 *
 * @author Thomas Thune Hansen <tth@bellcom.dk>
 */
function valghalla_volunteers_add() {
  drupal_set_title(t('Tilføj ny tilforordnet'));

  module_load_include('inc', 'node', 'node.pages');
  return node_add('volunteers');
}


/**
 * build form for simple user creation
 *
 * @global stdClass $user
 * @param string $form
 * @param array $form_state
 * @return array
 */
function valghalla_volunteers_add_sub_secretary_form($form, array &$form_state) {
  global $user;

  drupal_set_title(t('Opret ny bruger'));

  $user = user_load($user->uid);
  $user_party_id = empty($user->field_party[LANGUAGE_NONE][0]['tid']) ? FALSE : $user->field_party[LANGUAGE_NONE][0]['tid'];

  $form['#user'] = drupal_anonymous_user();
  $form['#user_category'] = 'register';
  $form['account'] = array(
      '#weight' => -10,
  );

  $form['account']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#maxlength' => USERNAME_MAX_LENGTH,
    '#description' => t('Spaces are allowed; punctuation is not allowed except for periods, hyphens, apostrophes, and underscores.'),
    '#required' => TRUE,
    '#attributes' => array('class' => array('username')),
    '#weight' => -10,
  );

  $form['account']['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#maxlength' => EMAIL_MAX_LENGTH,
    '#description' => t('A valid e-mail address. All e-mails from the system will be sent to this address. The e-mail address is not made public and will only be used if you wish to receive a new password or wish to receive certain news or notifications by e-mail.'),
    '#required' => TRUE,
  );

  field_attach_form('user', $form['#user'], $form, $form_state);

  foreach (field_info_instances('user', 'user') as $field_name => $instance) {
    if (empty($instance['settings']['user_register_form'])) {
      $form[$field_name]['#access'] = FALSE;
    }

    // if the user is member of a party, force the "sub" user into this party as well
    // if not, you get a choise list
    if ($user_party_id) {
      if ($field_name == 'field_party') {
        $form[$field_name][LANGUAGE_NONE]['#default_value'] = $user_party_id;
        $form[$field_name]['#access'] = FALSE;
      }
    } else {
      $form[$field_name]['#access'] = TRUE;
    }

    $form[$field_name]['#weight'] = -8;
  }

  $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Create new account'),
      '#weight' => 100
  );

  return $form;
}

/**
 * hook_form_validate implementation
 *
 * @param string $form
 * @param array $form_state
 */
function valghalla_volunteers_add_sub_secretary_form_validate($form, array &$form_state) {
  entity_form_field_validate('user', $form, $form_state);
  user_account_form_validate($form, $form_state);
}

/**
 * hook_form_submit implemntation
 *
 * @note the role of the new user is fixed to 4 (Partisekretær)
 *
 * @param string $form
 * @param array $form_state
 */
function valghalla_volunteers_add_sub_secretary_form_submit($form, array &$form_state) {
  form_state_values_clean($form_state);

  $secretary_of_party = variable_get('valhalla_settings_party_secretary_role_id', 4);

  // setup defaults
  $form_state['values']['pass'] = user_password();
  $form_state['values']['status'] = 1;
  $form_state['values']['roles'] = array($secretary_of_party => $secretary_of_party);
  $form_state['values']['init'] = $form_state['values']['mail'];

  $account = $form['#user'];
  entity_form_submit_build_entity('user', $account, $form, $form_state);

  $edit = array_intersect_key((array) $account, $form_state['values']);
  $account = user_save($account, $edit);

  $uri = entity_uri('user', $account);
  _user_mail_notify('register_admin_created', $account);
  drupal_set_message(t('A welcome message with further instructions has been e-mailed to the new user <a href="@url">%name</a>.', array(
          '@url' => url($uri['path'], $uri['options']),
          '%name' => $account->name)
      ));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function valghalla_volunteers_form_volunteers_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $form['buttons']['#weight'] = 100;

  if (isset($form['actions']['preview_changes'])) {
    $form['actions']['preview_changes']['#access'] = FALSE;
  }
  if (isset($form['actions']['preview'])) {
    $form['actions']['preview']['#access'] = FALSE;
  }

  // Only alter the form on edit and if the user is not an administrator.
  if (isset($form['#entity']->nid)
     && !user_access('administer valghalla')) {

    $hide_elements = array(
      'field_party',
      'field_external_signup',
      'field_token',
      'field_polling_station',
      'additional_settings',
      'field_address_bnummer',
      'field_electioninfo',
      'field_volunteer_valid_date',
      'field_cpr_valid_date',
      'field_valid_state',
      'field_cpr_status',
      'field_ending_time',
    );

    foreach ($hide_elements as $field_name) {
      $form[$field_name]['#access'] = FALSE;
    }

    valghalla_volunteers_field_group_hide_field_groups($form, array(
      'group_adress',
      'group_rsvp',
      'group_system',
    ));

    if (!user_access('see all psn numbers')) {
      $form['field_cpr_number']['#access'] = FALSE;
    }
  }

  // Redid the add volunteer form
  // Thomas Thune Hansen <tth@bellcom.dk>
  if (current_path() == 'valghalla/deltagere/tilfoej') {

    // The user has the option of creating and adding a volunteer to a polling
    // station directly. The info about the post is sent as query parameters.
    // We put these in the form, for later.
    $query = drupal_get_query_parameters();
    if ($query['role_nid']) {
      $form['role_nid'] = array(
        '#value' => $query['role_nid'],
        '#type' => 'hidden',
      );

      $form['party_tid'] = array(
        '#value' => $query['party_tid'],
        '#type' => 'hidden',
      );

      $form['pollingstation_nid'] = array(
        '#value' => $query['pollingstation_nid'],
        '#type' => 'hidden',
      );
    }

    $account = user_load($user->uid);
    $user_party_id = empty($account->field_party[LANGUAGE_NONE][0]['tid']) ? FALSE : $account->field_party[LANGUAGE_NONE][0]['tid'];

    // Hide these field in this view.
    valghalla_volunteers_field_group_hide_field_groups($form, array(
      'group_adress',
      'group_rsvp',
      'group_system',
    ));

    $field_ids = array(
      'field_diaet',
      'field_address_bnummer',
      'field_external_signup',
      'field_electioninfo',
      'field_electioninfo',
      'field_volunteer_valid_date',
      'field_cpr_valid_date',
      'field_valid_state',
      'field_cpr_status',
    );

    if ($user_party_id) {
      $field_ids[] = 'field_party';
    }

    foreach ($field_ids as $field_id) {
      $form[$field_id]['#access'] = FALSE;
    }

    $form['additional_settings']['#prefix'] = '<div style="display:none;">';
    $form['additional_settings']['#suffix'] = '</div>';

    $form_state['volunteer_add'] = TRUE;
    $form['actions']['submit']['#submit'][] = 'valghalla_volunteers_node_form_submit';
  }
  else {
    $rsvp_options = array(
      0 => t('Ubesvaret'),
      1 => t('Ja'),
      2 => t('Nej'),
      3 => t('Aldrig'),
    );
    foreach ($form['field_electioninfo'][LANGUAGE_NONE] as $key => $itme) {
      if (is_numeric($key)) {
        $form['field_electioninfo'][LANGUAGE_NONE][$key]['field_rsvp'][LANGUAGE_NONE]['#options'] = $rsvp_options;
        $form['field_electioninfo'][LANGUAGE_NONE][$key]['field_token'][LANGUAGE_NONE][$key]['value']['#required'] = true;

        $field_token = $form['field_electioninfo'][LANGUAGE_NONE][$key]['field_token'][LANGUAGE_NONE][$key]['value']['#default_value'];

        if ($field_token == '') {
          $fresh_token = _valghalla_helper_new_unique_token();
          $form['field_electioninfo'][LANGUAGE_NONE][$key]['field_token'][LANGUAGE_NONE][$key]['value']['#default_value'] = $fresh_token;
        }
      }
    }
  }

  // Hide N/A choise.
  if (!empty($form['field_no_sms'][LANGUAGE_NONE]['#options']['_none'])) {
    unset($form['field_no_sms'][LANGUAGE_NONE]['#options']['_none']);
  }
  if (!empty($form['field_no_mail'][LANGUAGE_NONE]['#options']['_none'])) {
    unset($form['field_no_mail'][LANGUAGE_NONE]['#options']['_none']);
  }
}

/**
 * Custom volunteers node submit callback.
 */
function valghalla_volunteers_node_form_submit($form, &$form_state) {
  // Redirect to the add volunteer page.
  $form_state['redirect'] = 'valghalla/deltagere/tilfoej';
}

/**
 * Implements hook_node_submit().
 */
function valghalla_volunteers_node_submit($node, $form, &$form_state) {
  ValghallaVolunteersLogger::info(sprintf('Volunteer form submit %s (nid: %d, uuid: %s)', $node->title, $node->nid, $node->uuid));

  // We move the values from the form, to a temporary storage on the node,
  // the adding of a volunteer to at post is happening in hook_node_insert.
  if (isset($form_state['values']['party_tid']) &&
    isset($form_state['values']['role_nid']) &&
    isset($form_state['values']['pollingstation_nid'])) {

    $node->add_to_post = array(
      'party_tid' => $form_state['values']['party_tid'],
      'role_nid' => $form_state['values']['role_nid'],
      'pollingstation_nid' => $form_state['values']['pollingstation_nid'],
    );
  }
}

/**
 * Implements hook_node_insert().
 */
function valghalla_volunteers_node_insert($node) {
  // If the post values are set on the node in 'add_to_post',
  // the volunteer should be added to the post with these options.
  if (isset($node->add_to_post)) {
    $volunteer_nid = $node->nid;
    $pollingstation_nid = $node->add_to_post['pollingstation_nid'];
    $role_nid = $node->add_to_post['role_nid'];
    $party_tid = $node->add_to_post['party_tid'];
    $election_nid = $_SESSION['election_nid'];

    valghalla_volunteers_add_volunteer_to_post($volunteer_nid, $pollingstation_nid, $role_nid, $party_tid, $election_nid);
  }
}

/**
 * Implements hook_node_validate().
 */
function valghalla_volunteers_node_validate($node, $form, &$form_state) {
  if ($node->type == "volunteers") {
    global $user;

    // Set user party id.
    $account = user_load($user->uid);
    $user_party_id = empty($account->field_party[LANGUAGE_NONE][0]['tid']) ? FALSE : $account->field_party[LANGUAGE_NONE][0]['tid'];
    $field_language = key($form_state['values']['field_party']);
    if ($user_party_id) {
      $form_state['values']['field_party'][$field_language][0]['tid'] = $user_party_id;
    }
  }
}

/**
 * hook_form_FORM_ID_alter() implementation
 *
 * @global stdClass $user
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 * @return void
 */
function valghalla_volunteers_form_user_profile_form_alter(&$form, &$form_state, $form_id) {

  if (user_access('access entire user profile form')) {
    return;
  }

  $hide_elements = array('locale', 'contact', 'timezone', 'field_polling_station', 'field_party');
  foreach ($hide_elements as $field_name) {
    $form[$field_name]['#access'] = FALSE;
  }
}

/**
 * update the current users party relation
 *
 * @global stdClass $user
 * @param int $tid
 */
function valghalla_volunteers_change_party($tid) {
  global $user;

  $edit = array(
      'uid' => $user->uid
  );
  if ($tid == 0) {
    $edit['field_party'] = array();
  } else {
    $edit['field_party'][LANGUAGE_NONE][0]['tid'] = $tid;
  }

  user_save($user, $edit);
  drupal_goto('status');
}

/**
 * sends a file with volunteers to download
 *
 * @global stdClass $user
 * @global stdClass $language
 */
function valghalla_volunteers_export() {
  global $user, $language;

  $user = user_load($user->uid);
  $user_party_id = empty($user->field_party[LANGUAGE_NONE][0]['tid']) ? FALSE : $user->field_party[LANGUAGE_NONE][0]['tid'];

  $where = '';
  if ($user_party_id) {
    $where = 'AND p.field_party_tid = ' . (int) $user_party_id;
  }

  $data = '"partibogstav";"cprnummer";"fulde navn";"email adresse";"telefonnummer"' . "\r\n";

  $result = db_query("
    SELECT
      entity_id
    FROM
      {field_data_field_party} AS p
    WHERE
      p.bundle = 'volunteers'
      " . $where
  );

  foreach ($result as $record) {
    $node = node_load($record->entity_id);
    $term = taxonomy_term_load($node->field_party[$language->language][0]['tid']);

    $data .= '"' .
        $term->name . '";"' .
        $node->field_cpr_number[$language->language][0]['value'] . '";"' .
        $node->title . '";"' .
        $node->field_email[$language->language][0]['email'] . '";"' .
        $node->field_phone[$language->language][0]['value'] . '"' .
        "\r\n"
    ;
  }

  if (ini_get('zlib.output_compression')) {
    ini_set('zlib.output_compression', 'Off');
  }

  header("Pragma: public");
  header("Expires: 0");
  header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
  header("Cache-Control: private", false);
  header("Content-Type: application/force-download");
  header('Content-Description: File Transfer');
  header('Content-Disposition: attachment; filename="tilforordnede.csv";');
  header("Content-Transfer-Encoding: binary");
  header("Content-Length: " . strlen($data));
  die($data);
}

/**
 * Implement hook_form_FORM_ID_alter()
 */
function valghalla_volunteers_form_valhalla_admin_settings_form_alter(&$form, &$form_state, $form_id){
  $form['valghalla_allow_rsvp_update'] = array(
    '#type' => 'checkbox',
    '#title' => t('Tillad den tilforordnede at opdatere sin status'),
    '#default_value' => variable_get('valghalla_allow_rsvp_update'),
  );

  $form['valghalla_rsvp_update_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Besked til deltageren efter svar er afgivet'),
    '#default_value' => variable_get('valghalla_rsvp_update_message'),
  );

  $form['valghalla_volunteers_always_show_rsvp_link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Vis altid svar link ud for deltager på valgoversigt (blå talebobbel).'),
    '#default_value' => variable_get('valghalla_volunteers_always_show_rsvp_link', FALSE),
  );

  $form['valghalla_volunteers_check_cpr_match'] = array(
    '#type' => 'checkbox',
    '#title' => t('Yderligere check om CPR-nummer matcher mellem RSVP-formularen og deltageren.'),
    '#default_value' => variable_get('valghalla_volunteers_check_cpr_match', TRUE),
  );
}

/**
 * Hides field groups including children in a render array.
 *
 * @param array $element
 *   A render array. Can be a form, node, user, ...
 * @param array $group_names
 *   An array of field group names that should be hidden.
 */
function valghalla_volunteers_field_group_hide_field_groups(&$element, $group_names) {
  foreach ($group_names as $group_name) {
    if (isset($element['#fieldgroups'][$group_name]) && isset($element['#group_children'])) {
      // Hide the field group.
      $element['#fieldgroups'][$group_name]->format_type = 'hidden';
      // Hide the elements inside the field group.
      foreach (array_keys($element['#group_children'], $group_name) as $field_name) {
        $element[$field_name]['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function valghalla_volunteers_preprocess_views_view_table(&$variables) {
  foreach ($variables['result'] as $key => $row) {
    $details = array();
    if (isset($row->field_field_no_mail[0]['raw']['value'])
      && intval($row->field_field_no_mail[0]['raw']['value'])) {
      $variables['row_classes'][$key][] = 'no-digital-post';
      $details[] = t('Fritaget for digital post.');
    }
    if (isset($row->field_field_no_sms[0]['raw']['value'])
      && intval($row->field_field_no_sms[0]['raw']['value'])) {
      $variables['row_classes'][$key][] = 'no-nem-sms';
      $details[] = t('Fritaget for NemSMS.');
    }
    
    if (!empty($details)) {
      $variables['rows'][$key]['title'] .= ' (' . implode(' ', $details) . ')';
    }
  }
}

/**
 * Wrapper with module existing check.
 */
function valghalla_volunteers_notify($election_nid, $role_nid, $fc, $type) {
  if (!odin_is_election_active($election_nid)) {
    return FALSE;
  }

  if (module_exists('valghalla_notifications')) {
    valghalla_notifications_notify_volunteer($election_nid, $role_nid, $fc, $type);
  }
  else {
    watchdog('valghalla_volunteers','Notifikation blev ikke afsend. Modul valghalla_notifications er ikke aktiveret.', array(), WATCHDOG_WARNING);
  }
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Check existing field_electioninfo.
 * Wrapper for tags:
 *  - ei_volunteer_exist,
 *  - ei_election_exist,
 *  - ei_polling_station_exist,
 *  - ei_party_exist,
 *  - ei_role_exist.
 */
function valghalla_volunteers_query_ei_valid_references_alter(QueryAlterableInterface $query) {
  $hooks = array(
    'ei_volunteer_exist',
    'ei_election_exist',
    'ei_polling_station_exist',
    'ei_party_exist',
    'ei_role_exist',
  );
  foreach ($hooks as $hook) {
    drupal_alter('query_' . $hook, $query);
  }
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Field_electioninfo - not empty host node.
 */
function valghalla_volunteers_query_ei_volunteer_exist_alter(QueryAlterableInterface $query) {
  $query->addJoin('left', 'field_data_field_electioninfo', 'fv', 'fv.field_electioninfo_value = field_collection_item.item_id');
  $query->addJoin('left', 'node', 'nv', 'nv.nid = fv.entity_id');
  $query->isNotNull('nv.nid');
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Field_electioninfo - not empty field_election node.
 */
function valghalla_volunteers_query_ei_election_exist_alter(QueryAlterableInterface $query) {
  $query->addJoin('left', 'field_data_field_election', 'fe', 'fe.entity_id = field_collection_item.item_id');
  $query->addJoin('left', 'node', 'ne', 'ne.nid = fe.field_election_target_id');
  $query->isNotNull('ne.nid');}

/**
 * Implements hook_query_TAG_alter().
 *
 * Field_electioninfo - not empty field_vlnt_station node.
 */
function valghalla_volunteers_query_ei_polling_station_exist_alter(QueryAlterableInterface $query) {
  $query->addJoin('left', 'field_data_field_vlnt_station', 'fps', 'fps.entity_id = field_collection_item.item_id');
  $query->addJoin('left', 'node', 'nps', 'nps.nid = fps.field_vlnt_station_target_id');
  $query->isNotNull('nps.nid');}

/**
 * Implements hook_query_TAG_alter().
 *
 * Field_electioninfo - not empty field_post_party taxonomy term.
 */
function valghalla_volunteers_query_ei_party_exist_alter(QueryAlterableInterface $query) {
  $query->addJoin('left', 'field_data_field_post_party', 'fpp', 'fpp.entity_id = field_collection_item.item_id');
  $query->addJoin('left', 'taxonomy_term_data', 'tpp', 'tpp.tid = fpp.field_post_party_target_id');
  $query->isNotNull('tpp.tid');
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Field_electioninfo - not empty field_post_role node.
 */
function valghalla_volunteers_query_ei_role_exist_alter(QueryAlterableInterface $query) {
  $query->addJoin('left', 'field_data_field_post_role', 'fpr', 'fpr.entity_id = field_collection_item.item_id');
  $query->addJoin('left', 'node', 'npr', 'npr.nid = fpr.field_post_role_target_id');
  $query->isNotNull('npr.nid');
}

/**
 * Implements hook_monolog_channel_info().
 */
function valghalla_volunteers_monolog_channel_info() {
  $channels = array();

  $channels['valghalla_volunteers_channel'] = array(
    'label' => t('Valghalla volunteers'),
    'description' => t('The default channel to log Valghalla volunteer messages.'),
    'default profile' => 'valghalla_volunteers_profile',
  );

  return $channels;
}

/**
 * Implements hook_entity_update().
 */
function valghalla_volunteers_entity_update($entity, $type) {
  if (empty($entity->field_name)
    || ($type != 'field_collection_item' && $entity->field_name != 'field_electioninfo')) {
    return;
  }

  $field_rsvp_comment = field_get_items('field_collection_item', $entity, 'field_rsvp_comment');
  $original_field_rsvp_comment = field_get_items('field_collection_item', $entity->original, 'field_rsvp_comment');
  if (
    // Comment has been added to election info.
    (empty($original_field_rsvp_comment[0]['value']) && !empty($field_rsvp_comment[0]['value']))
    // Comment has been changed for election info.
    || (!empty($original_field_rsvp_comment[0]['value']) && !empty($field_rsvp_comment[0]['value'])
      && $original_field_rsvp_comment[0]['value'] != $field_rsvp_comment[0]['value'])) {
    _valghalla_volunteers_send_rsvp_notification($entity);
  }
}

/**
 * Implements hook_entity_insert().
 */
function valghalla_volunteers_entity_insert($entity, $type) {
  if (empty($entity->field_name)
    || ($type != 'field_collection_item' && $entity->field_name != 'field_electioninfo')) {
    return;
  }
  _valghalla_volunteers_send_rsvp_notification($entity);
}
