<?php

/**
 * @file
 * Volunteer validate module.
 */

module_load_include('inc', 'valghalla_volunteer_validator', 'valghalla_volunteer_validator.entity');
module_load_include('php', 'valghalla_volunteer_validator', 'src/Entity/ValghallaVolunteerValidationRecordController');
module_load_include('php', 'valghalla_volunteer_validator', 'src/Entity/ValghallaVolunteerValidationRecord');

/**
 * Implements hook_menu().
 */
function valghalla_volunteer_validator_menu() {
  $items['admin/valghalla/validator'] = array(
    'title' => 'Deltager validering',
    'description' => 'Indstillinger for CPR validering',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('valghalla_volunteer_validator_settings'),
    'access arguments' => array('administer valghalla'),
    'file' => 'valghalla_volunteer_validator.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/valghalla/validator/batch'] = array(
    'title' => 'Deltager validering',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('valghalla_volunteer_validator_batch'),
    'access arguments' => array('administer valghalla'),
    'file' => 'valghalla_volunteer_validator.admin.inc',
  );

  $items['admin/valghalla/validator/batch/validate/%'] = array(
    'title' => 'Deltager validering',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('valghalla_volunteer_validator_validate_batch', 5),
    'access arguments' => array('administer valghalla'),
    'file' => 'valghalla_volunteer_validator.admin.inc',
  );

  valghalla_volunteer_validation_record_menu($items);
  return $items;
}

/**
 * Implements hook_permission().
 */
function valghalla_volunteer_validator_permission() {
  $permissions = array(
    'administer valghalla_volunteer_validation_record entities' => array(
      'title' => t('Administer Volunteer Validation Record entities'),
    ),
    'view any valghalla_volunteer_validation_record entity' => array(
      'title' => t('View any Volunteer Validation Record entity'),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_ctools_plugin_type().
 */
function valghalla_volunteer_validator_ctools_plugin_type() {
  return array(
    'cpr_service' => array(
      'use hooks' => TRUE,
    ),
    'validate' => array(
      'use hooks' => TRUE,
    ),
  );
}

/**
 * Implements hook_node_presave().
 */
function valghalla_volunteer_validator_node_presave($node) {
  if ($node->type != 'volunteers') {
    return;
  }
  $node_wrapper = entity_metadata_wrapper('node', $node);
  $cpr = $node_wrapper->field_cpr_number->value();

  // Fetching the name and address.
  if (variable_get('valghalla_volunteer_validator_get_address', FALSE)) {
    $get_address_messages = valghalla_volunteer_validator_query_service('get_address', $cpr);

    foreach ($get_address_messages as $get_address_message) {
      if ($get_address_message['status']) {
        $field_map = array(
          'field_address_road' => 'road',
          'field_address_road_no' => 'road_no',
          'field_address_floor' => 'floor',
          'field_address_door' => 'door',
          'field_address_zipcode' => 'zipcode',
          'field_address_city' => 'city',
          'field_address_coname' => 'coname',
          'field_municipality' => 'municipality',
        );

        foreach ($field_map as $field => $index) {
          $node_wrapper->{$field} = $get_address_message[$index];
        }
      }
    }
  }

  // Generating node title.
  $field_map = array(
    'field_first_name' => array('fornavn', 'mellemnavn'),
    'field_second_name' => 'efternavn',
  );

  $names_arr = array();
  if (variable_get('valghalla_volunteer_validator_get_name')) {
    // Fetching names split.
    $data = vcv_person_lookup_extended_query($cpr);
    if ($data['status']) {
      foreach ($field_map as $field => $index_keys) {
        if (!is_array($index_keys)) {
          $index_keys = array($index_keys);
        }
        $value_arr = [];
        foreach ($index_keys as $index) {
          if (!empty($data['persondata']->navn->{$index})) {
            $value_arr[] = trim($data['persondata']->navn->{$index});
          }
        }
        $value = implode(' ', $value_arr);
        $node_wrapper->{$field} = $value;
        $names_arr[] = $value;
      }
    }
  }
  else {
    foreach ($field_map as $field => $index_keys) {
      $names_arr[] = trim($node_wrapper->{$field}->value());
    }
  }
  $node_wrapper->title = implode(' ', $names_arr);

  // Fetching subscription.
  if (variable_get('valghalla_volunteer_validator_get_subscription_status')) {
    $subscriptions = valghalla_volunteer_validator_query_service('get_subscriptions_status', $cpr);
    if (!empty($subscriptions[0]['status'])) {
      $node_wrapper->field_no_mail = (int) $subscriptions[0]['digital_post'] == FALSE ? '1' : '0';
      $node_wrapper->field_no_sms = $subscriptions[0]['nem_sms'] == FALSE ? '1' : '0';
    }
  }
}

/**
 * Implements hook_node_submit().
 */
function valghalla_volunteer_validator_node_submit($node, $form, &$form_state) {
  // Check field_election info field.
  // Truncate invalid field collection items.
  $field_electioninfo_lang = field_language('node', $node, 'field_electioninfo');
  if (!empty($node->field_electioninfo[$field_electioninfo_lang])) {
    foreach ($node->field_electioninfo[$field_electioninfo_lang] as $key => $value) {
      if (empty($value['entity']) && !empty($value['value'])) {
        $value['entity'] = entity_load_single('field_collection_item', $value['value']);
      }
      if (!empty($value['entity']) && !valghalla_volunteers_fc_electioninfo_validate($value['entity'])) {
        watchdog('valghalla_volunteers_validator', 'Remove fc item from %nid', array('%nid' => $node->nid));
        unset($node->field_electioninfo[$field_electioninfo_lang][$key]);
      }
    }
  }
}

/**
 * Implements hook_node_validate().
 */
function valghalla_volunteer_validator_node_validate($node, $form, &$form_state) {
  if ($node->type != 'volunteers') {
    return;
  }

  if ($form_state['clicked_button']['#parents'][0] == 'delete') {
    return;
  }

  $cpr_field = reset($form_state['values']['field_cpr_number']);
  $cpr = $cpr_field[0]['value'];

  // Check formatting.
  if (!valghalla_volunteer_validator_validate_format($cpr)) {
    form_set_error('field_cpr_number', t('Det angivne CPR-nummer er ikke korrekt formatteret (f.eks. 123456-8910).'));
  }

  // Check for duplicates.
  if ($nid = valghalla_volunteer_validator_check_duplicates($cpr)) {
    if ($nid !== $node->nid) {
      form_set_error('field_cpr_number', t('Der er allerede oprettet en deltager med det angivne CPR-nummer'));
    }
  }

  // Skip validation via services if disabled.
  if (!variable_get('valghalla_volunteer_validator_enable', FALSE)) {
    return;
  }

  $query = drupal_get_query_parameters();
  if (!empty($query['election_nid'])) {
    $election = node_load($query['election_nid']);
  }

  if (!empty($query['party_tid'])) {
    $party_tid = $query['party_tid'];
    $party = taxonomy_term_load($party_tid);
  }

  // Run validator.
  if (empty($election) && empty($party)) {
    $messages = valghalla_volunteer_validator_query_service('validate_cpr', $cpr);
    $messages = array_merge($messages, valghalla_volunteer_validator_validate($node));
  }
  else {
    $election_config = valghalla_volunteer_validator_get_election_config($election, $party);
    $messages = valghalla_volunteer_validator_query_service('validate_cpr_per_election', $cpr, $election_config);
    $field_election_date = field_get_items('node', $election, 'field_date');
    if ($election_config['validate_age'] && !empty($field_election_date[0]['value'])) {
      $messages = array_merge($messages, valghalla_volunteer_validator_validate_service('validate_per_election', $cpr, array('election_date' => $field_election_date[0]['value'])));
    }
  }

  if (isset($messages) && is_array($messages)) {
    foreach ($messages as $message) {
      if ($message['status'] === FALSE) {
        form_set_error('field_cpr_number', t('Det angivne CPR-nummer kan ikke valideres: @text', array('@text' => $message['text'])));
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Disable address fields, and let user know that the values
 * will be fetched from the CPR service.
 */
function valghalla_volunteer_validator_form_volunteers_node_form_alter(&$form, &$form_state, $form_id) {
  if (variable_get('valghalla_volunteer_validator_get_address', FALSE)) {
    $fields = array(
      'field_address_road',
      'field_address_road_no',
      'field_address_floor',
      'field_address_door',
      'field_address_zipcode',
      'field_address_city',
      'field_address_coname',
      'field_municipality',
    );

    foreach ($fields as $field) {
      $form[$field]['#disabled'] = TRUE;
      $form[$field]['#suffix'] = '<em>Indholdet af dette felt bliver automatisk hentet fra CPR service, når indholdet gemmes.</em>';
    }
  }

  if (!$form['title']['#default_value']) {
    $form['title']['#default_value'] = 'Hentes når indholdet gemmes';
  }
  $form['title']['#disabled'] = TRUE;
  $form['title']['#description'] = '<em>Indholdet af dette felt bliver automatisk hentet fra CPR service, når indholdet gemmes.</em>';

  if (variable_get('valghalla_volunteer_validator_get_name')) {
    $form['field_first_name']['#disabled'] = TRUE;
    $form['field_second_name']['#disabled'] = TRUE;
  }

  if (variable_get('valghalla_volunteer_validator_get_subscription_status')) {
    $form['field_no_mail']['#access'] = FALSE;
    $form['field_no_sms']['#access'] = FALSE;
  }

  $node = $form_state['node'];
  $field_electioninfo_lang = field_language('node', $node, 'field_electioninfo');
  if (!empty($form['field_electioninfo'][$field_electioninfo_lang])) {
    foreach ($form['field_electioninfo'][$field_electioninfo_lang] as &$value) {
      if (is_array($value)) {
        foreach (element_children($value) as $key) {
          if (strpos($key, 'field') === 0) {
            $value[$key]['#disabled'] = TRUE;
          }
        }
      }
    }
  }
}

/**
 * Validate the format of the CPR number.
 *
 * The format must be 123456-1234
 */
function valghalla_volunteer_validator_validate_format($cpr) {
  return preg_match("/^[0-9]{6}-[0-9]{4}$/", $cpr);
}

/**
 * Check if the cpr is used already.
 *
 * If it is we send back the nid for the volunteer.
 */
function valghalla_volunteer_validator_check_duplicates($cpr) {
  if ($volunteer = _valghalla_helper_get_volunteer_by_cpr($cpr)) {
    return $volunteer->nid;
  }
  return FALSE;
}

/**
 * Query cpr service.
 */
function valghalla_volunteer_validator_query_service($action, $cpr, $process = 'unkown') {
  $messages = array();
  ctools_include('plugins');

  $enabled_services = variable_get('valghalla_volunteer_validator_cpr_service', FALSE);
  $plugins = ctools_get_plugins('valghalla_volunteer_validator', 'cpr_service');

  foreach ($plugins as $plugin_key => $plugin) {
    if ($enabled_services[$plugin_key] && isset($plugin[$action]) && function_exists($plugin[$action])) {
      $message = call_user_func($plugin[$action], $cpr, $process);
      $messages[] = $message;
    }
  }

  return $messages;
}

/**
 * Validate volunteer, using enabled validate plugins.
 */
function valghalla_volunteer_validator_validate_service($action, $cpr, $context) {
  $messages = array();
  ctools_include('plugins');

  $enabled_services = variable_get('valghalla_volunteer_validator_services', FALSE);
  $plugins = ctools_get_plugins('valghalla_volunteer_validator', 'validate');

  foreach ($plugins as $plugin_key => $plugin) {
    if ($enabled_services[$plugin_key] && isset($plugin[$action]) && function_exists($plugin[$action])) {
      $message = call_user_func($plugin[$action], $cpr, $context);
      $messages[] = $message;
    }
  }

  return $messages;
}

/**
 * Validate volunteer, using enabled plugins.
 */
function valghalla_volunteer_validator_validate(&$volunteer) {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('valghalla_volunteer_validator', 'validate');

  $enabled = variable_get('valghalla_volunteer_validator_services', array());

  $log = array();
  foreach ($enabled as $service) {
    if (isset($plugins[$service])) {
      $callback = $plugins[$service]['validate'];
      $message = call_user_func($callback, $volunteer);

      if (!$message['valid']) {
        $log[$service] = $message;
      }
    }
  }

  return $log;
}

/**
 * Composes an array of validation configurations saved on election.
 *
 * The party validation configurations can override the election validation
 * configurations.
 *
 * @param mixed $election
 *   Election node.
 * @param mixed $party
 *   Party taxonomy term if settings need to be retrieved with party override.
 *
 * @return array
 *   Validation configuration of election.
 */
function valghalla_volunteer_validator_get_election_config($election, $party = NULL) {
  $election_config = array(
    'validate_municipality' => FALSE,
    'validate_citizenship' => FALSE,
    'validate_civil_status' => FALSE,
    'validate_age' => FALSE,
  );

  $field_election_valid_municipal = field_get_items('node', $election, 'field_election_valid_municipal');
  if (!empty($field_election_valid_municipal)) {
    $election_config['validate_municipality'] = ($field_election_valid_municipal[0]['value'] == 1);
  }

  $field_election_valid_citizenship = field_get_items('node', $election, 'field_election_valid_citizenship');
  if (!empty($field_election_valid_citizenship)) {
    $election_config['validate_citizenship'] = ($field_election_valid_citizenship[0]['value'] == 1);
  }

  $field_election_valid_civ_status = field_get_items('node', $election, 'field_election_valid_civ_status');
  if (!empty($field_election_valid_civ_status)) {
    $election_config['validate_civil_status'] = ($field_election_valid_civ_status[0]['value'] == 1);
  }

  $field_election_valid_age = field_get_items('node', $election, 'field_election_valid_age');
  if (!empty($field_election_valid_age)) {
    $election_config['validate_age'] = ($field_election_valid_age[0]['value'] == 1);
  }

  if (empty($party)) {
    return $election_config;
  }

  $field_party_skip_valid_municipal = field_get_items('taxonomy_term', $party, 'field_party_skip_valid_municipal');
  if (!empty($field_party_skip_valid_municipal)) {
    if ($field_party_skip_valid_municipal[0]['value'] == 1) {
      $election_config['validate_municipality'] = FALSE;
    }
  }

  $field_party_skip_valid_citizen = field_get_items('taxonomy_term', $party, 'field_party_skip_valid_citizen');
  if (!empty($field_party_skip_valid_citizen)) {
    if ($field_party_skip_valid_citizen[0]['value'] == 1) {
      $election_config['validate_citizenship'] = FALSE;
    }
  }

  return $election_config;
}

/**
 * Add validation record.
 */
function _valghalla_volunteer_validator_add_history_record($volunteer_node, $type, $election_id, $message) {
  $record = array(
    'type|' . $type,
    'election_nid|' . $election_id,
    'message|' . serialize($message),
  );
  $field_language = field_language('node', $volunteer_node, 'field_validation_history');
  $volunteer_node->field_validation_history[$field_language][]['value'] = implode("\n", $record);
  node_save($volunteer_node);
}
