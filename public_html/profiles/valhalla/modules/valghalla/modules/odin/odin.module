<?php

/**
 * @file
 * Odin helper module.
 */

/**
 * Implements hook_menu().
 */
function odin_menu() {
  $items['reset-alphabetical/%'] = array(
    'title' => 'Nulstil til alfabetisk rækkefølge',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('odin_reset_alphabetical_form', 1),
    'access arguments' => array('administer valghalla'),
  );
  return $items;
}

/**
 * Reset node type content to alphabetical order.
 */
function odin_reset_alphabetical_form($form, &$form_state, $node_type) {
  $form['node_type'] = array(
    '#type' => 'hidden',
    '#value' => $node_type,
  );

  $type = node_type_get_name($node_type);

  $form['message'] = array(
    '#type' => 'item',
    '#markup' => t('Er du sikker på at du vil nulstille rækkefølgen for "%type"?', array('%type' => $type)),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Fortsæt'),
    '#suffix' => l(t('Annuller'), $_SERVER['HTTP_REFERER']),
  );

  return $form;
}

/**
 * Submit handler for reset node order form.
 */
function odin_reset_alphabetical_form_submit(&$form, &$form_state) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $form_state['values']['node_type'])
    ->propertyOrderBy('title', 'ASC');

  $result = $query->execute();

  if (isset($result['node'])) {
    $weight = 0;

    foreach ($result['node'] as $nid => $info) {
      $node = node_load($nid);

      // For now this field is used on both role and polling station node.
      $language = field_language('node', $node, 'field_role_weight');
      $node->field_role_weight[$language][0]['value'] = $weight;
      node_save($node);

      $weight++;
    }
  }

  drupal_set_message(t('Rækkefølgen er blevet nulstillet'));
}

/**
 * Retrieve party tid for next free seat on specified parameters.
 */
function odin_party_tid_for_next_free_seat($election_nid, $polling_station_nid, $role_nid) {
  $parties = odin_get_parties();
  $polling_station = node_load($polling_station_nid);

  foreach ($parties as $party_tid => $party) {
    $posts_array = valghalla_volunteers_to_polling_station_roles($polling_station, $party_tid, $election_nid);

    foreach ($posts_array['existing'] as $key => $existing) {
      unset($posts_array['posts_to_fill'][$key]);
    }
    foreach ($posts_array['posts_to_fill'] as $post_to_fill) {
      if ($post_to_fill['role_nid'] == $role_nid) {
        return $party_tid;
      }
    }
  }
}

/**
 * Get count for roles and total.
 *
 * @params
 *  $eleciton_nid
 *  $polling_station_nids
 *  $roles
 *  $user_party_id
 */
function odin_get_volunteers_count($election_nid, $polling_station_nids, $roles, $user_party_id = NULL) {
  $total_count = array(
    'assigned' => 0,
    'total' => 0,
    'rsvp_ok' => 0,
    'rsvp_no' => 0,
  );

  if (empty($polling_station_nids)) {
    return array('total_count' => $total_count);
  }

  foreach ($roles as $role_nid => $role_title) {
    $role_count[$role_nid]['role_name'] = $role_title;

    // Total assinged roles.
    $assigned_count = _valghalla_helper_get_roles_count($polling_station_nids, $role_nid, $user_party_id, $election_nid);
    $role_count[$role_nid]['assigned'] = is_numeric($assigned_count) ? $assigned_count : 0;
    $total_count['assigned'] += $role_count[$role_nid]['assigned'];

    // Total assigned for role.
    $volunteer_query = new EntityFieldQuery();

    $volunteer_query->entityCondition('entity_type', 'field_collection_item')
      ->entityCondition('bundle', 'field_electioninfo')
      ->propertyCondition('archived', 0)
      ->fieldCondition('field_election', 'target_id', $election_nid)
      ->fieldCondition('field_vlnt_station', 'target_id', $polling_station_nids)
      ->fieldCondition('field_post_role', 'target_id', $role_nid)
      ->addTag('ei_valid_references');

    if ($user_party_id) {
      $volunteer_query->fieldCondition('field_post_party', 'target_id', $user_party_id);
    }

    $query_result = $volunteer_query->execute();
    $result       = array_shift($query_result);

    $role_count[$role_nid]['total'] = empty($result) ? 0 : count($result);
    $total_count['total'] += $role_count[$role_nid]['total'];

    // Total replied ok for role.
    $volunteer_query = new EntityFieldQuery();

    $volunteer_query->entityCondition('entity_type', 'field_collection_item')
      ->entityCondition('bundle', 'field_electioninfo')
      ->propertyCondition('archived', 0)
      ->fieldCondition('field_election', 'target_id', $election_nid)
      ->fieldCondition('field_vlnt_station', 'target_id', $polling_station_nids)
      ->fieldCondition('field_post_role', 'target_id', $role_nid)
      // RVSP 1 corresponds to ok.
      ->fieldCondition('field_rsvp', 'value', 1)
      ->addTag('ei_valid_references');

    if ($user_party_id) {
      $volunteer_query->fieldCondition('field_post_party', 'target_id', $user_party_id);
    }

    $query_result = $volunteer_query->execute();
    $result       = array_shift($query_result);

    $role_count[$role_nid]['rsvp_ok'] = empty($result) ? 0 : count($result);
    $total_count['rsvp_ok'] += $role_count[$role_nid]['rsvp_ok'];

    // Total replied no for role.
    $volunteer_query = new EntityFieldQuery();

    $volunteer_query->entityCondition('entity_type', 'field_collection_item')
      ->entityCondition('bundle', 'field_electioninfo')
      ->propertyCondition('archived', 0)
      ->fieldCondition('field_election', 'target_id', $election_nid)
      ->fieldCondition('field_vlnt_station', 'target_id', $polling_station_nids)
      ->fieldCondition('field_post_role', 'target_id', $role_nid)
      // RVSP 2,3 is no.
      ->fieldCondition('field_rsvp', 'value', array(2, 3))
      ->addTag('ei_valid_references');

    if ($user_party_id) {
      $volunteer_query->fieldCondition('field_post_party', 'target_id', $user_party_id);
    }

    $query_result = $volunteer_query->execute();
    $result       = array_shift($query_result);

    $role_count[$role_nid]['rsvp_no'] = empty($result) ? 0 : count($result);
    $total_count['rsvp_no'] += $role_count[$role_nid]['rsvp_no'];
  }

  return $count = array('total_count' => $total_count, 'role_count' => $role_count);
}

/**
 * Retrive keyed list of parties.
 */
function odin_get_parties() {
  $parties = array();

  $taxonomy = taxonomy_vocabulary_machine_name_load('partier');
  foreach (taxonomy_get_tree($taxonomy->vid) as $term) {
    $parties[$term->tid] = $term->name;
  }

  return $parties;
}

/**
 * Retrive keyed list of roles.
 */
function odin_get_roles() {
  $data = &drupal_static(__FUNCTION__);

  if (!isset($data)) {
    // This SQL is generated by views.
    $sql = <<<EOL
      SELECT
        node.title AS node_title,
        node.nid AS nid,
        field_data_field_role_weight.field_role_weight_value AS field_data_field_role_weight_field_role_weight_value
      FROM
        {node} node
      LEFT JOIN
        {field_data_field_role_weight} field_data_field_role_weight
        ON
          node.nid = field_data_field_role_weight.entity_id AND
          (field_data_field_role_weight.entity_type = 'node' AND field_data_field_role_weight.deleted = '0')
      WHERE
        (( (node.type IN  ('roles')) ))
      ORDER BY
        field_data_field_role_weight_field_role_weight_value ASC,
        node_title ASC
EOL;

    $result = db_query($sql)->fetchAllKeyed(1, 0);
    $data = $result ? $result : array();
  }

  return $data;
}

/**
 * Get election function.
 *
 * @return array
 *   Array with election nodes.
 */
function odin_get_elections() {
  $data = array();

  foreach (entity_load('node', FALSE, array('type' => 'election')) as $item) {
    $data[$item->nid] = $item->title;
  }

  return $data;
}

/**
 * Get active elections.
 */
function odin_get_active_elections() {
  $nids = db_select('field_data_field_election_status', 'es')
    ->fields('es', array('entity_id'))
    ->condition('es.bundle', 'election')
    ->condition('es.field_election_status_value', 1)
    ->execute()
    ->fetchAll(PDO::FETCH_COLUMN);

  return $nids;
}

/**
 * Check if election is active.
 *
 * @param int $election_nid
 *   Election node id.
 *
 * @return bool
 *   Election active status.
 */
function odin_is_election_active($election_nid) {
  $election = node_load($election_nid);
  $field_status = field_get_items('node', $election, 'field_election_status');

  if (!empty($field_status[0]['value']) && !empty($election->status)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Retrieve constituencies for the election.
 */
function odin_get_constituencies($election_nid) {
  $polling_stations = odin_get_polling_stations($election_nid);
  if (empty($polling_stations)) {
    return array();
  }

  $sql = <<<EOL
    SELECT
      node.nid AS nid,
      node_field_data_field_constituency.nid AS node_field_data_field_constituency_nid
    FROM
      {node} node
    LEFT JOIN
      {field_data_field_constituency} field_data_field_constituency
        ON node.nid = field_data_field_constituency.entity_id AND
          (field_data_field_constituency.entity_type = 'node' AND field_data_field_constituency.deleted = '0')
    LEFT JOIN
      {node} node_field_data_field_constituency
        ON field_data_field_constituency.field_constituency_nid = node_field_data_field_constituency.nid
    WHERE (( (node.type IN  ('polling_station')) AND (node.nid IN (:nids)) ))
EOL;

  $result = db_query($sql, array(':nids' => array_keys($polling_stations)))->fetchAllKeyed(0, 1);
  $constituencies = array();

  if ($result) {
    foreach ($polling_stations as $polling_station_nid => $polling_station_title) {
      $constituency_nid = $result[$polling_station_nid];
      $constituencies[$constituency_nid][$polling_station_nid] = $polling_station_title;
    }
  }

  return $constituencies;
}

/**
 * Retrieve a list of polling stations, sorted by weight.
 */
function odin_get_polling_stations($election_nid) {
  $election_node = node_load($election_nid);

  $polling_stations_field = field_get_items('node', $election_node, 'field_polling_stations');

  if (empty($polling_stations_field)) {
    return array();
  }
  foreach ($polling_stations_field as $data) {
    $nids[$data['target_id']] = $data['target_id'];
  }

  $sql = <<<EOL
    SELECT
      node.nid AS nid,
      node.title AS node_title,
      field_data_field_role_weight.field_role_weight_value AS field_data_field_role_weight_field_role_weight_value
    FROM
      {node} node
      LEFT JOIN
        {field_data_field_role_weight} field_data_field_role_weight
        ON node.nid = field_data_field_role_weight.entity_id AND
          (field_data_field_role_weight.entity_type = 'node' AND field_data_field_role_weight.deleted = '0')
    WHERE
      (( (node.type IN  ('polling_station')) AND (node.nid IN (:nids)) ))
    ORDER BY
      field_data_field_role_weight_field_role_weight_value ASC,
      node_title ASC
EOL;

  $result = db_query($sql, array(':nids' => $nids))->fetchAllKeyed(0, 1);

  return $result ? $result : array();
}

/**
 * Check function to see if volunteer has post on election.
 *
 * @param int $volunteer_nid
 *   Volunteer node id.
 * @param int $election_nid
 *   Election node id.
 *
 * @return bool
 *   TRUE if volunteer has post on election, FALSE otherwise.
 */
function odin_volunteer_has_post_on_election($volunteer_nid, $election_nid) {
  $fc_query = new EntityFieldQuery();

  $fc_query->entityCondition('entity_type', 'field_collection_item')
    ->entityCondition('bundle', 'field_electioninfo')
    ->propertyCondition('archived', 0)
    ->fieldCondition('field_election', 'target_id', $election_nid);

  $result = $fc_query->execute();

  if (isset($result['field_collection_item'])) {
    $fc_ids = array_keys($result['field_collection_item']);

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'volunteers')
      ->entityCondition('entity_id', $volunteer_nid)
      ->fieldCondition('field_electioninfo', 'value', $fc_ids, 'IN')
      ->count();

    return $query->execute() > 0 ? TRUE : FALSE;
  }
  return FALSE;
}

/**
 * Retrive volunteer node by cpr number.
 *
 * @param string $cpr
 *   Volunteer CPR number.
 *
 * @return mixed
 *   stdClass on success, otherwise FALSE
 */
function odin_load_volunteer_by_cpr($cpr) {
  $entity_id = db_select('field_data_field_cpr_number', 't')
    ->fields('t', array('entity_id'))
    ->condition('entity_type', 'node', '=')
    ->condition('bundle', 'volunteers', '=')
    ->condition('field_cpr_number_value', $cpr, '=')
    ->execute()
    ->fetchField();

  if ($entity_id) {
    return node_load($entity_id);
  }

  return FALSE;
}

/**
 * Fetching future elections.
 *
 * @return array|bool
 *   Array with future election, FALSE otherwise.
 */
function odin_get_future_elections() {
  $election_query = new EntityFieldQuery();
  $election_query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'election')
    ->fieldCondition('field_date', 'value', date('Y-m-d'), '>');
  $result = $election_query->execute();

  if (isset($result['node'])) {
    return array_keys(array_shift($result));
  }
  return FALSE;
}

/**
 * Helper, get a list of polling stations with enough free spots.
 */

/**
 * Helper to get a list of polling stations with enough free spots.
 *
 * @param int $election_nid
 *   Nid of election.
 * @param int $qty
 *   Number of seats that needs to be available.
 * @param int $role_nid
 *   Nid of the role.
 * @param int $party_tid
 *   Nid of the party, can be NULL.
 *
 * @return array
 *   List of polling station grouped by constituency.
 */
function odin_get_signup_available_polling_stations($election_nid, $qty, $role_nid, $party_tid = NULL) {
  $election_node = node_load($election_nid);

  $roles[$role_nid] = $role_nid;

  // Generate options list, with polling stations with enough free seats.
  $polling_stations_field = field_get_items('node', $election_node, 'field_polling_stations');

  foreach ($polling_stations_field as $data) {
    $polling_station_nids[$data['target_id']] = $data['target_id'];
  }

  $options = array();
  $constituencies = array();
  $polling_stations = array();
  foreach (node_load_multiple($polling_station_nids) as $polling_station) {
    $count = odin_get_volunteers_count($election_node->nid, array($polling_station->nid), $roles, $party_tid);

    if (($count['total_count']['assigned'] - $count['total_count']['total']) >= $qty) {
      if ($constituency_field = field_get_items('node', $polling_station, 'field_constituency')) {
        // We save the data in 2 arrays, and don't populate options yes, as we
        // have to sort the options according to the title of the
        // constituencies.
        $constituency = node_load($constituency_field[0]['nid']);
        $constituencies[$constituency->nid] = $constituency->title;
        $polling_stations[$constituency->nid][$polling_station->nid] = $polling_station->title;
      }
      else {
        $options[$polling_station->nid] = $polling_station->title;
      }
    }
  }

  if ($constituencies && $polling_stations) {
    natsort($constituencies);

    foreach ($constituencies as $constituency_nid => $constituency_title) {
      $options[$constituency_title] = $polling_stations[$constituency_nid];
    }
  }

  return $options;
}

/**
 * Returns a mapped list of all municipalities.
 *
 * Key is the municipality ID, and value is the municipality name.
 *
 * @return array
 *   List of municipalities.
 */
function odin_get_municipalities() {
  return array(
    580 => 'Aabenraa',
    851 => 'Aalborg',
    751 => 'Aarhus',
    492 => 'Ærø',
    165 => 'Albertslund',
    201 => 'Allerød',
    420 => 'Assens',
    151 => 'Ballerup',
    530 => 'Billund',
    400 => 'Bornholm',
    153 => 'Brøndby',
    810 => 'Brønderslev',
    155 => 'Dragør',
    240 => 'Egedal',
    561 => 'Esbjerg',
    430 => 'Faaborg-Midtfyn',
    563 => 'Fanø',
    710 => 'Favrskov',
    320 => 'Faxe',
    210 => 'Fredensborg',
    607 => 'Fredericia',
    147 => 'Frederiksberg',
    813 => 'Frederikshavn',
    250 => 'Frederikssund',
    190 => 'Furesø',
    157 => 'Gentofte',
    159 => 'Gladsaxe',
    161 => 'Glostrup',
    253 => 'Greve',
    270 => 'Gribskov',
    376 => 'Guldborgsund',
    510 => 'Haderslev',
    260 => 'Halsnæs',
    766 => 'Hedensted',
    217 => 'Helsingør',
    163 => 'Herlev',
    657 => 'Herning',
    219 => 'Hillerød',
    860 => 'Hjørring',
    169 => 'Høje-Taastrup',
    316 => 'Holbæk',
    661 => 'Holstebro',
    615 => 'Horsens',
    223 => 'Hørsholm',
    167 => 'Hvidovre',
    756 => 'Ikast-Brande',
    183 => 'Ishøj',
    849 => 'Jammerbugt',
    326 => 'Kalundborg',
    440 => 'Kerteminde',
    101 => 'København',
    259 => 'Køge',
    621 => 'Kolding',
    825 => 'Læsø',
    482 => 'Langeland',
    350 => 'Lejre',
    665 => 'Lemvig',
    360 => 'Lolland',
    173 => 'Lyngby-Taarbæk',
    846 => 'Mariagerfjord',
    410 => 'Middelfart',
    773 => 'Morsø',
    370 => 'Næstved',
    707 => 'Norddjurs',
    480 => 'Nordfyns',
    450 => 'Nyborg',
    727 => 'Odder',
    461 => 'Odense',
    306 => 'Odsherred',
    730 => 'Randers',
    840 => 'Rebild',
    760 => 'Ringkøbing-Skjern',
    329 => 'Ringsted',
    175 => 'Rødovre',
    265 => 'Roskilde',
    230 => 'Rudersdal',
    741 => 'Samsø',
    740 => 'Silkeborg',
    746 => 'Skanderborg',
    779 => 'Skive',
    330 => 'Slagelse',
    269 => 'Solrød',
    540 => 'Sønderborg',
    340 => 'Sorø',
    336 => 'Stevns',
    671 => 'Struer',
    479 => 'Svendborg',
    706 => 'Syddjurs',
    185 => 'Tårnby',
    787 => 'Thisted',
    550 => 'Tønder',
    187 => 'Vallensbæk',
    573 => 'Varde',
    575 => 'Vejen',
    630 => 'Vejle',
    820 => 'Vesthimmerlands',
    791 => 'Viborg',
    390 => 'Vordingborg',
  );
}

/**
 * Gets a municipality name by the provided ID.
 *
 * @param int $id
 *   Id of municipality.
 *
 * @return string
 *   Name of the found municipality or empty string.
 */
function odin_get_municipality($id) {
  $all_municipalities = odin_get_municipalities();
  if (array_key_exists($id, $all_municipalities)) {
    return $all_municipalities[$id];
  }
  return '';
}

/**
 * Helper function to get/check full election counts.
 */
function odin_volunteers_full_counts($check = FALSE) {
  $nids = odin_get_future_elections();
  $counts = array();
  if (!empty($nids)) {
    // We also need the roles.
    $roles = odin_get_roles();
    $parties = odin_get_parties();
    foreach ($nids as $election_nid) {
      $election = node_load($election_nid);
      $polling_station_nids = odin_get_polling_stations($election_nid);
      $polling_station_count = array();
      foreach ($polling_station_nids as $polling_station_nid => $polling_station_title) {
        // If the array of restricting stations is not empty we only let the
        // user see the polling stations in this array.
        if (!empty($restrict_polling_stations) &&
          !in_array($polling_station_nid, $restrict_polling_stations)) {
          continue;
        }

        $polling_station_count[$polling_station_nid] = odin_get_volunteers_count(
          $election_nid,
          array($polling_station_nid),
          $roles);
      }
      $constituency_nids = odin_get_constituencies($election_nid);
      $roles = odin_get_roles();
      $counts[$election->uuid] = array(
        'title' => $election->title,
        'counts' => array(),
      );
      foreach ($constituency_nids as $constituency_nid => $polling_station_nids) {
        foreach ($polling_station_nids as $polling_station_nid => $polling_station_title) {
          foreach ($parties as $party_tid => $party) {
            foreach ($roles as $role_nid => $role) {
              $assigned = _valghalla_helper_get_roles_count(array($polling_station_nid), $role_nid, $party_tid, $election_nid);
              if ($assigned == 0) {
                continue;
              }
              $status = odin_get_volunteers_count($election_nid, array($polling_station_nid), array($role_nid => $role), $party_tid);

              // Check count regarding correct value.
              if (!empty($status['total_count']['total'] && !empty($status['total_count']['assigned']))
                && $status['total_count']['total'] > $status['total_count']['assigned']
                && $check) {
                $role = node_load($role_nid);
                drupal_set_message(format_string('!total vs !assigned on !election -> !polling_station -> !role',
                  array(
                    '!total' => $status['total_count']['total'],
                    '!assigned' => $status['total_count']['assigned'],
                    '!election' => $election->title,
                    '!polling_station' => $polling_station_title,
                    '!role' => $role->title,
                  )), 'warning');
              }

              $counts[$election->uuid]['counts'][$constituency_nid][$polling_station_nid][$party_tid][$role_nid] = $status['total_count'];
            }
          }
        }
      }
    }
  }
  return !$check ? $counts : NULL;
}
