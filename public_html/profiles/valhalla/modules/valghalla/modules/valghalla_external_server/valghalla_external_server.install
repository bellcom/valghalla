<?php

/**
 * @file
 * Valghalla_external_server.install.
 */

/**
 * Implements hook_install().
 *
 * Sets required variables.
 */
function valghalla_external_server_install() {
  // Disables the CPR validation.
  variable_set('valghalla_volunteer_validator_enable', 0);
  variable_set('valghalla_volunteer_validator_get_address', 0);
  variable_set('valghalla_volunteer_validator_get_name', 0);
  variable_set('valghalla_volunteer_validator_get_subscription_status', 0);

  variable_set('validate_create_age', 0);
  variable_set('validate_create_municipality', 0);
  variable_set('validate_create_citizenship', 0);
  variable_set('validate_create_civil_status', 0);

  // Module requires this variable to be FALSE.
  variable_set('node_export_dependency_disable_modules', array('field_collection' => 'field_collection'));
  variable_set('node_export_dependency_attach_nodes', FALSE);
  variable_set('node_export_existing', 'revision');

  // Load all volunteers.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'volunteers')
    ->execute();

  // Anonymize the volunteer node.
  $volunteers = node_load_multiple(array_keys($result['node']));
  if (!empty($volunteers) && is_array($volunteers)) {
    foreach ($volunteers as $volunteer) {
      $volunteer = valghalla_synch_node_export_anonymize_node($volunteer);
      node_save($volunteer);

      // Deleting all revisions of that volunteer.
      $revisions = node_revision_list($volunteer);
      array_shift($revisions);

      foreach ($revisions as $revision) {
        node_revision_delete($revision->vid);
      }

      // Remove this node from synch queue.
      valghalla_synch_queue_remove_item($volunteer->uuid);
    }
  }

  // Remove permissions from external system.
  valghalla_external_server_update_7102();
}

/**
 * Implements hook_enable().
 *
 * Disables the CPR validation.
 */
function valghalla_external_server_enable() {
  variable_set('valghalla_volunteer_validator_enable', 0);
  variable_set('valghalla_volunteer_validator_get_address', 0);
  variable_set('valghalla_volunteer_validator_get_name', 0);
  variable_set('valghalla_volunteer_validator_get_subscription_status', 0);

  variable_set('validate_create_age', 0);
  variable_set('validate_create_municipality', 0);
  variable_set('validate_create_citizenship', 0);
  variable_set('validate_create_civil_status', 0);
}

/**
 * Implements hook_requirements().
 */
function valghalla_external_server_requirements($phase) {
  $requirements = array();
  switch ($phase) {
    case 'runtime':

      $not_allowed_modules = array(
        // Contrib modules.
        'ckeditor',
        'contact',
        'field_ui',
        'imce',
        'locationmap',
        'panels_ipe',
        'panels_mini',
        'search',
        'views_ui',
        'contextual',
        'dashboard',
        'shortcut',
        'color',

        // Valghalla modules.
        'valghalla_lists',
        'liste_beskeder',
        'liste_frivillige_uden_email',
        'liste_m_cpr_nummer',
        'liste_parti_oversigt',
        'liste_valghalla_export',
        'liste_valghalla_kvittering',
        'valghalla_notifications',
        'valghalla_signup',
        'valghalla_signup_list',
        'valghalla_volunteer_validator',
        'valghalla_volunteers_import',
        'valghalla_volunteers_invite',
        'vcv_serviceplatformen',
        'vcv_person_lookup_extended',
        'vvv_validate_age',
      );

      $exists_modules = array();
      foreach ($not_allowed_modules as $module) {
        if (module_exists($module)) {
          $exists_modules[] = $module;
        }
      }

      if (!empty($exists_modules)) {
        $requirements['valghalla_external_server'] = array(
          'title' => t('Modules that should be disabled'),
          'severity' => REQUIREMENT_ERROR,
          'value' => t('Enabled: !list', array('!list' => theme('item_list', array('items' => $exists_modules)))),
        );
      }
      break;
  }

  return $requirements;
}

/**
 * Remove permissions from roles.
 */
function valghalla_external_server_update_7102() {
  $deny_pemissions = array(
    'add volunteers',
    'administer services',
    'administer menu',
    'administer users',
    'administer views',
  );
  $node_permissons = array_keys(node_permission());
  $allowed_permissons = array(
    'access content overview',
    'access content',
    'view own unpublished content',
    'view revisions',
  );

  $deny_pemissions = array_merge(
    $deny_pemissions,
    // Nodes permissons.
    array_diff($node_permissons, $allowed_permissons),
    // Taxonomy permissons.
    array_keys(taxonomy_permission())
  );

  foreach (array('administrator', 'Partisekretær', 'Valgsekretær') as $role_name) {
    $role = user_role_load_by_name($role_name);
    if (empty($role)) {
      watchdog('valghalla_external_server', 'Role %role not found to remove permissions.', array(
        '%role' => $role_name,
      ));
      continue;
    }
    user_role_revoke_permissions($role->rid, $deny_pemissions);
  }
}

/**
 * Implements hook_update_N().
 *
 * Replacing valghalla_external_server_nemlogin module to nemlogin.
 */
function valghalla_external_server_update_7103() {
  module_disable(array(
    'valghalla_external_server_nemlogin',
  ));
  drupal_uninstall_modules(array(
    'valghalla_external_server_nemlogin',
  ));

  module_enable(array(
    'nemlogin',
  ));

  variable_set('nemlogin_plugin_id', 'Idp');
  variable_set('nemlogin_idp_url', 'https://nemlogin.bellcom.dk/simplesaml');
  variable_set('nemlogin_idp_mnemo', 'bellcom.dk');
  variable_set('nemlogin_idp_fetch_only', TRUE);
}
